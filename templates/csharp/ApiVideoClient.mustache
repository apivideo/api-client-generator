using {{packageName}}.Api;
using RestSharp;

namespace {{packageName}}.Client
{
    /// <summary>
    /// Class that allows you to call all the api routes
    /// </summary>
    public class ApiVideoClient {
        private readonly ApiClient apiClient;
        {{# apiInfo.apis }}
        {{^x-client-hidden}}
        private readonly {{classFilename}} {{classVarName}};
        {{/x-client-hidden}}
        {{/ apiInfo.apis }}

        /// <summary>
        /// Build an instance that targets production environment without authentication
        /// </summary>
        public ApiVideoClient() : this(Environment.PRODUCTION) {
        }

        /// <summary>
        ///  Build an instance that targets the given environment without authentication
        /// </summary>
        /// <param name="environment">the target environment</param>
        public ApiVideoClient(Environment environment) : this(new ApiClient(environment.GetUrl())) {
        }

        /// <summary>
        /// Build an instance that targets the production environment with authentication
        /// </summary>
        /// <param name="apiKey">the api key to use to authenticate</param>
        public ApiVideoClient(string apiKey) : this(apiKey, Environment.PRODUCTION) { 
        }

        /// <summary>
        /// Build an instance that targets the given environment with authentication
        /// </summary>
        /// <param name="apiKey">the api key to use to authenticate</param>
        /// <param name="environment">environment the target environment</param>
        public ApiVideoClient(string apiKey, Environment environment) : this(new ApiClient(apiKey, environment.GetUrl())) { 
        }

        /// <summary>
        /// Build an instance that targets the given environment with authentication
        /// </summary>
        /// <param name="apiKey">the api key to use to authenticate</param>
        /// <param name="host">host the target host</param>
        public ApiVideoClient(string apiKey, string host) : this(new ApiClient(apiKey, host)) {
        }

        /// <summary>
        /// Build an instance that targets the production environment using a custom OkHttp client
        /// </summary>
        /// <param name="client">the RestClient instance to use</param>
        public ApiVideoClient(IRestClient client) : this(new ApiClient(client))
        { 
        }

        private ApiVideoClient(ApiClient apiClient) {
            this.apiClient = apiClient;
    {{# apiInfo.apis }}
    {{^x-client-hidden}}
            this.{{classVarName}} = new {{classFilename}}(this.apiClient);
    {{/x-client-hidden}}
    {{/ apiInfo.apis }}
        }

    {{# apiInfo.apis }}{{^x-client-hidden}}
        /// <summary>
        /// Get an {{classFilename}} instance
        /// </summary>
        /// <returns>{{classFilename}}</returns>
        public {{classFilename}} {{# lambda.titlecase }}{{classVarName}}{{/ lambda.titlecase }}() {
            return this.{{classVarName}};
        }
    {{/x-client-hidden}}{{/ apiInfo.apis }}

        /// <summary>
        /// Gets the http client
        /// </summary>
        /// <returns>Current Api http client</returns>
        public ApiClient GetHttpClient() {
            return this.apiClient;
        }

        /// <summary>
        /// Gets the upload chunk size
        /// </summary>
        /// <returns>The upload chunk size</returns>
        public int GetUploadChunkSize() {
            return this.apiClient.UploadChunkSize;
        }

        /// <summary>
        /// Updates the upload chunk size
        /// </summary>
        /// <param name="uploadChunkSize">the new chunk size</param>
        public void SetUploadChunkSize(int uploadChunkSize) {
            this.apiClient.UploadChunkSize = uploadChunkSize;
        }
        
        /// <summary>
        /// Gets the rest client timeout
        /// </summary>
        /// <returns>The rest client timeout</returns>
        public int GetTimeout()
        {
            return this.apiClient.GetTimeout();
        }

        /// <summary>
        /// Updates the rest client timeout
        /// </summary>
        /// <param name="newTimeOut">the new timeout</param>
        public void SetTimeout(int newTimeOut)
        {
            this.apiClient.SetTimeout(newTimeOut);
        }

        /// <summary>
        /// Set the application name
        /// </summary>
        /// <param name="applicationName">the application name</param>
        public void setApplicationName(string applicationName)
        {
            this.setApplicationName(applicationName, null);
        }

        /// <summary>
        /// Set the application name
        /// </summary>
        /// <param name="applicationName">the application name</param>
        /// <param name="applicationVersion">the application version</param>
        public void setApplicationName(string applicationName, string applicationVersion)
        {
            this.apiClient.setApplicationName(applicationName, applicationVersion);
        }
    }

    /// <summary>
    /// Provides Stream helpers methods
    /// </summary>
    public static class ApiVideoExtensions
    {
        /// <summary>
        /// Returns the api URL of a given environment
        /// </summary>
        /// <param name="env">The environment to target</param>
        /// <returns>The environment url</returns>
        public static string GetUrl(this Environment env)
        {
            switch (env)
            {
                case Environment.PRODUCTION:
                    return "https://ws.api.video";
                case Environment.SANDBOX:
                    return "https://sandbox.api.video";
                default:
                    return "";
            }
        }
    }
    /// <summary>
    /// Environment to target
    /// </summary>
    public enum Environment
    {
        /// <summary>
        /// Production environment
        /// </summary>
        PRODUCTION,
        /// <summary>
        /// Sandbox environment
        /// </summary>
        SANDBOX
    }
}
