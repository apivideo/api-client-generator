// APIs.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation{{#useVapor}}
import Vapor
{{/useVapor}}{{^removeMigrationProjectNameClass}}
// We reverted the change of {{projectName}}API to {{projectName}} introduced in https://github.com/OpenAPITools/openapi-generator/pull/9624
// Because it was causing the following issue https://github.com/OpenAPITools/openapi-generator/issues/9953
// If you are affected by this issue, please consider removing the following two lines,
// By setting the option removeMigrationProjectNameClass to true in the generator
@available(*, deprecated, renamed: "{{projectName}}API")
{{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} typealias {{projectName}} = {{projectName}}API
{{/removeMigrationProjectNameClass}}

enum {{projectName}}Error: Error {
    case invalidApplicationName
    case invalidApplicationVersion
    case missingApplicationName
}

public class {{projectName}} {

    public static var apiKey: String? = nil
    public static var basePath = "{{basePath}}"
    {{#useVapor}}
    internal static var customHeaders: [String: String] = [:]
    {{/useVapor}}
    {{^useVapor}}
    internal  static var customHeaders:[String: String] = ["AV-Origin-Client": "{{ originClient }}:{{ podVersion }}"]
    private static var chunkSize: Int = {{defaultChunkSize}}{{#useAlamofire}}
    internal static var requestBuilderFactory: RequestBuilderFactory = AlamofireRequestBuilderFactory(){{/useAlamofire}}{{#useURLSession}}
    internal static var requestBuilderFactory: RequestBuilderFactory = URLSessionRequestBuilderFactory(){{/useURLSession}}
    internal static var credential = ApiVideoCredential()
    public static var apiResponseQueue: DispatchQueue = .main

    public static func setChunkSize(chunkSize: Int) throws {
        if (chunkSize > {{maxChunkSize}}) {
            throw ParameterError.outOfRange
        } else if (chunkSize < {{minChunkSize}}) {
            throw ParameterError.outOfRange
        }
        
        {{projectName}}.chunkSize = chunkSize
    }

    public static func getChunkSize() -> Int {
        return {{projectName}}.chunkSize
    }


    public static func setApplicationName(applicationName: String, applicationVersion: String?) throws {
        if(applicationName.isEmpty) {
            if(applicationVersion != nil && !applicationVersion!.isEmpty) {
                throw {{projectName}}Error.missingApplicationName
            }
            {{projectName}}.customHeaders["AV-Origin-App"] = nil
            return
        }

        let pattern = #"^[\w\-]{1,50}$"#
        let regex = try! NSRegularExpression(pattern: pattern, options: .anchorsMatchLines)
        let stringRange = NSRange(location: 0, length: applicationName.utf16.count)
        let matches = regex.matches(in: applicationName, range: stringRange)
        if(matches.isEmpty) {
            throw {{projectName}}Error.invalidApplicationName
        }

        if let applicationVersion = applicationVersion, !applicationVersion.isEmpty {
            let pattern2 = #"^\d{1,3}(\.\d{1,3}(\.\d{1,3})?)?$"#
            let regex2 = try! NSRegularExpression(pattern: pattern2, options: .anchorsMatchLines)
            let stringRange2 = NSRange(location: 0, length: applicationVersion.utf16.count)
            let matches2 = regex2.matches(in: applicationVersion, range: stringRange2)
            if(matches2.isEmpty) {
                throw {{projectName}}Error.invalidApplicationVersion
            }
            {{projectName}}.customHeaders["AV-Origin-App"] = applicationName + ":" + applicationVersion
            return
        }
        {{projectName}}.customHeaders["AV-Origin-App"] = applicationName
    }

    {{/useVapor}}
}{{^useVapor}}

{{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}open{{/nonPublicApi}} class RequestBuilder<T> {
    var headers: [String: String]
    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} let parameters: [String: Any]?
    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} let method: String
    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} let URLString: String

    /// Optional block to obtain a reference to the request's progress instance when available.{{#useURLSession}}
    /// With the URLSession http client the request's progress only works on iOS 11.0, macOS 10.13, macCatalyst 13.0, tvOS 11.0, watchOS 4.0.
    /// If you need to get the request's progress in older OS versions, please use Alamofire http client.{{/useURLSession}}
    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} let onProgressReady: ((Progress) -> Void)?

    required {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} init(method: String, URLString: String, parameters: [String: Any]?, headers: [String: String] = [:], onProgressReady: ((Progress) -> Void)? = nil) {
        self.method = method
        self.URLString = URLString
        self.parameters = parameters
        self.headers = headers
        self.onProgressReady = onProgressReady

        addHeaders({{projectName}}.customHeaders)
    }

    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}open{{/nonPublicApi}} func addHeaders(_ aHeaders: [String: String]) {
        for (header, value) in aHeaders {
            headers[header] = value
        }
    }

    @discardableResult
    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}open{{/nonPublicApi}} func execute(_ apiResponseQueue: DispatchQueue = {{projectName}}.apiResponseQueue, _ completion: @escaping (_ result: Swift.Result<Response<T>, ErrorResponse>) -> Void) -> URLSessionTask? {
        return nil
    }

    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} func addHeader(name: String, value: String) -> Self {
        if !value.isEmpty {
            headers[name] = value
        }
        return self
    }
}

{{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} protocol RequestBuilderFactory {
    func getNonDecodableBuilder<T>() -> RequestBuilder<T>.Type
    func getBuilder<T: Decodable>() -> RequestBuilder<T>.Type
}{{/useVapor}}
