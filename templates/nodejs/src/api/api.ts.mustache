{{>licenseInfo}}

import path from 'path';
import {
  existsSync,
  statSync,
  createReadStream,
  openSync,
  read,
  closeSync,
  ReadStream,
} from 'fs';
import { promisify } from 'util';
import { URLSearchParams } from 'url';
import FormData from 'form-data';
import ObjectSerializer from '../ObjectSerializer';
import HttpClient, { QueryOptions, ApiResponseHeaders } from '../HttpClient';
import ProgressiveSession from '../model/ProgressiveSession';
{{#imports}}
import {{classname}} from '../model/{{classname}}';
{{/imports}}
import { Readable, Stream } from 'stream';
import { Blob } from 'buffer';
import { readableToBuffer } from "../HttpClient";
{{#operations}}

/**
 * {{#description}}{{{description}}}{{/description}}{{^description}}no description{{/description}}
 */
export default class {{classname}} {
  private httpClient: HttpClient;

  constructor(httpClient: HttpClient) {
    this.httpClient = httpClient;
  }

  {{#operation}}

  {{#vendorExtensions.x-client-chunk-upload}}
  /**
   {{#summary}}
   * {{&summary}}
   * This will create a progressive upload session.{{/summary}}{{#allParams}}{{^isFile}}
   * @param {{paramName}} {{description}}{{/isFile}}{{/allParams}}
   */
  public create{{#titlecase}}{{nickname}}{{/titlecase}}ProgressiveSession({{#allParams}}{{^isFile}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{#vendorExtensions.x-optional-object}} = {}{{/vendorExtensions.x-optional-object}}{{^-last}}, {{/-last}}{{/isFile}}{{/allParams}}): ProgressiveSession<{{{returnType}}}> {
    class {{#titlecase}}{{nickname}}{{/titlecase}}ProgressiveSession<Type> {
        private httpClient: HttpClient;
        private currentPart = 1;{{#vendorExtensions.x-client-copy-from-response}}
        private {{paramName}}?: string;{{/vendorExtensions.x-client-copy-from-response}}

        constructor(httpClient: HttpClient) {
          this.httpClient = httpClient;
        }

        uploadPart(file: string, progressListener?: (event: UploadProgressEvent) => void) {
          return this.upload(file, false, progressListener).then((res) => res.body);
        };

        uploadPartWithResponseHeaders(file: string, progressListener?: (event: UploadProgressEvent) => void) {
          return this.upload(file, false, progressListener);
        };

        uploadLastPart(file: string, progressListener?: (event: UploadProgressEvent) => void) {
           return this.upload(file, true, progressListener).then((res) => res.body);
        };

        uploadLastPartWithResponseHeaders(file: string, progressListener?: (event: UploadProgressEvent) => void) {
           return this.upload(file, true, progressListener);
        };        

        async upload(file: string, isLast: boolean, progressListener?: (event: UploadProgressEvent) => void) {
            const queryParams: QueryOptions = {};
            queryParams.headers = {};

          {{#allParams}}
            {{#required}}
            {{^isFile}}
            if ({{paramName}} === null || {{paramName}} === undefined) {
              throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
            }
            {{/isFile}}
            {{#isFile}}
            {{#platforms}}
            {{#node}}

            if (!existsSync({{paramName}})) {
              throw new Error(`${ {{paramName}} } must be a readable source file`);
            }

            const length = statSync({{paramName}}).size;
            if (length <= 0) {
              throw new Error(`${ {{paramName}} } is empty`);
            }
            {{/node}}
            {{/platforms}}
            {{/isFile}}
            {{/required}}
            {{/allParams}}
            // Path Params
            const localVarPath = '{{{path}}}'.substring(1){{#pathParams}}
              .replace('{' + '{{baseName}}' + '}', encodeURIComponent(String({{paramName}}))){{/pathParams}};
            {{#queryParams}}
            {{#-first}}

            // Query Params
            const urlSearchParams = new URLSearchParams();

            {{/-first}}

            if ({{paramName}} !== undefined) {
              {{# vendorExtensions.x-is-deep-object }}
              if (typeof {{paramName}} !== 'object') {
                  throw new Error(`${ {{paramName}} } is not an object`);
              }
              Object.keys({{paramName}}).forEach((k) => urlSearchParams.append("{{baseName}}["+k+"]", ObjectSerializer.serialize({{paramName}}[k], "string", "")));
              {{/ vendorExtensions.x-is-deep-object }}
              {{^ vendorExtensions.x-is-deep-object }}
              urlSearchParams.append("{{baseName}}", ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}", "{{dataFormat}}"));
              {{/ vendorExtensions.x-is-deep-object }}
            }
            {{#-last}}
            queryParams.searchParams = urlSearchParams;
            {{/-last}}
            {{/queryParams}}
            {{#headerParams}}
            {{#-first}}

            // Header Params
            {{/-first}}
            queryParams.headers["{{baseName}}"] = ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}", "{{dataFormat}}");
            {{/headerParams}}

            {{#bodyParam}}
            // Body Params
            const contentType = ObjectSerializer.getPreferredMediaType([{{#consumes}}
              "{{{mediaType}}}"{{^-last}},{{/-last}}
            {{/consumes}}]);
            queryParams.headers["Content-Type"] = contentType;

            queryParams.body = ObjectSerializer.stringify(
              ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}", "{{dataFormat}}"),
              contentType
            );
            {{/bodyParam}}

            queryParams.method = '{{httpMethod}}';

            const formData = new FormData();


            const filename = path.basename(file);
            formData.append(filename, createReadStream(file), filename);
            {{#vendorExtensions.x-client-copy-from-response}}
            if(this.{{paramName}}) {
                formData.append("{{paramName}}", this.{{paramName}});
            }
            {{/vendorExtensions.x-client-copy-from-response}}
            queryParams.body = formData;
            queryParams.headers['Content-Range'] = `part ${this.currentPart}/${isLast ? this.currentPart : "*"}`;


            if (progressListener) {
              queryParams.onUploadProgress = (progress) => {
                  progressListener({
                      chunksCount: 1,
                      currentChunk: 0,
                      currentChunkUploadedBytes: progress.loaded,
                      currentChunkTotalBytes: progress.total || 0,
                      uploadedBytes: progress.loaded,
                      totalBytes: progress.total || 0,
                });
              }
            }

            const response = await this.httpClient.call(localVarPath, queryParams);

            this.currentPart++;
            const responseBody = ObjectSerializer.deserialize(
                ObjectSerializer.parse(response.body, response.headers["content-type"]),
                "{{{returnType}}}", "{{returnFormat}}"
            ) as Type;
            
            {{#vendorExtensions.x-client-copy-from-response}}
            this.{{paramName}} = (responseBody as any).{{paramName}};
            {{/vendorExtensions.x-client-copy-from-response}}
            
            return {
              body: responseBody,
              headers: response.headers
            }
        }
    }

    return new {{#titlecase}}{{nickname}}{{/titlecase}}ProgressiveSession<{{{returnType}}}>(this.httpClient);
  }
  {{/vendorExtensions.x-client-chunk-upload}}

{{#vendorExtensions.x-group-parameters}}
  /**
   {{#notes}}
   * {{&notes}}
   {{/notes}}
   {{#summary}}
   * {{&summary}}
   {{/summary}}
   * @param {Object} searchParams
   {{#allParams}}
   * @param { {{dataType}} } searchParams.{{paramName}} {{description}}
   {{/allParams}}
   */
  public async {{nickname}}(args: { {{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{^-last}}, {{/-last}}{{/allParams}} }{{#vendorExtensions.x-optional-object}} = {}{{/vendorExtensions.x-optional-object}}): Promise<{{#returnType}}{{{returnType}}}{{/returnType}} {{^returnType}}void{{/returnType}}> {
    return this.{{nickname}}WithResponseHeaders(args).then((res) => res.body);
  }
  {{/vendorExtensions.x-group-parameters}}
  {{^vendorExtensions.x-group-parameters}}
  /**
   {{#notes}}
   * {{&notes}}
   {{/notes}}
   {{#summary}}
   * {{&summary}}
   {{/summary}}
   {{#allParams}}
   * @param {{paramName}} {{description}}
   {{/allParams}}
   */
  public async {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{#isFile}}{{#vendorExtensions.x-client-chunk-upload}}string{{/vendorExtensions.x-client-chunk-upload}}{{^vendorExtensions.x-client-chunk-upload}}string | Readable | Buffer{{/vendorExtensions.x-client-chunk-upload}}{{/isFile}}{{^isFile}}{{{dataType}}}{{/isFile}}{{#vendorExtensions.x-optional-object}} = {}{{/vendorExtensions.x-optional-object}}{{^-last}}, {{/-last}}{{/allParams}}{{#vendorExtensions.x-client-chunk-upload}}, progressListener?: (event: UploadProgressEvent) => void{{/vendorExtensions.x-client-chunk-upload}}): Promise<{{#returnType}}{{{returnType}}}{{/returnType}} {{^returnType}}void{{/returnType}}> {
    return this.{{nickname}}WithResponseHeaders({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}}{{#vendorExtensions.x-client-chunk-upload}}, progressListener{{/vendorExtensions.x-client-chunk-upload}}).then((res) => res.body);;
  }
  {{/vendorExtensions.x-group-parameters}}


  {{#vendorExtensions.x-group-parameters}}
  /**
   {{#notes}}
   * {{&notes}}
   {{/notes}}
   {{#summary}}
   * {{&summary}}
   {{/summary}}
   * @param {Object} searchParams
   {{#allParams}}
   * @param { {{dataType}} } searchParams.{{paramName}} {{description}}
   {{/allParams}}
   */
  public async {{nickname}}WithResponseHeaders({ {{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}} }: { {{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{^-last}}, {{/-last}}{{/allParams}} }{{#vendorExtensions.x-optional-object}} = {}{{/vendorExtensions.x-optional-object}}): Promise<{{#returnType}} {headers: ApiResponseHeaders, body:{{{returnType}}} } {{/returnType}} {{^returnType}}void{{/returnType}}> {
  {{/vendorExtensions.x-group-parameters}}
  {{^vendorExtensions.x-group-parameters}}
  /**
   {{#notes}}
   * {{&notes}}
   {{/notes}}
   {{#summary}}
   * {{&summary}}
   {{/summary}}
   {{#allParams}}
   * @param {{paramName}} {{description}}
   {{/allParams}}
   */
  public async {{nickname}}WithResponseHeaders({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{#isFile}}{{#vendorExtensions.x-client-chunk-upload}}string{{/vendorExtensions.x-client-chunk-upload}}{{^vendorExtensions.x-client-chunk-upload}}string | Readable | Buffer{{/vendorExtensions.x-client-chunk-upload}}{{/isFile}}{{^isFile}}{{{dataType}}}{{/isFile}}{{#vendorExtensions.x-optional-object}} = {}{{/vendorExtensions.x-optional-object}}{{^-last}}, {{/-last}}{{/allParams}}{{#vendorExtensions.x-client-chunk-upload}}, progressListener?: (event: UploadProgressEvent) => void{{/vendorExtensions.x-client-chunk-upload}}): Promise<{{#returnType}} {headers: ApiResponseHeaders, body:{{{returnType}}} } {{/returnType}} {{^returnType}}void{{/returnType}}> {
  {{/vendorExtensions.x-group-parameters}}
    const queryParams: QueryOptions = {};
    queryParams.headers = {};
    {{#allParams}}
    {{#required}}
    {{^isFile}}
    if ({{paramName}} === null || {{paramName}} === undefined) {
      throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
    }
    {{/isFile}}
    {{#isFile}}
    {{#platforms}}
    {{#node}}
    {{#vendorExtensions.x-client-chunk-upload}}
    if (!existsSync({{paramName}})) {
      throw new Error(`${ {{paramName}} } must be a readable source file`);
    }

    const length = statSync({{paramName}}).size;
    if (length <= 0) {
      throw new Error(`${ {{paramName}} } is empty`);
    }
    {{/vendorExtensions.x-client-chunk-upload}}
    {{^vendorExtensions.x-client-chunk-upload}}
    let {{paramName}}Name = 'file';
    let {{paramName}}Buffer = {{paramName}};
    if (typeof {{paramName}} === 'string') {
        {{paramName}}Name = path.basename({{paramName}});
        {{paramName}}Buffer = createReadStream({{paramName}});
    }
    if ({{paramName}} instanceof Readable) {
        {{paramName}}Buffer = await readableToBuffer({{paramName}});
    }

    {{/vendorExtensions.x-client-chunk-upload}}
    {{/node}}
    {{/platforms}}
    {{/isFile}}
    {{/required}}
    {{/allParams}}
    // Path Params
    const localVarPath = '{{{path}}}'.substring(1){{#pathParams}}
      .replace('{' + '{{baseName}}' + '}', encodeURIComponent(String({{paramName}}))){{/pathParams}};
    {{#queryParams}}
    {{#-first}}

    // Query Params
    const urlSearchParams = new URLSearchParams();

    {{/-first}}
    if ({{paramName}} !== undefined) {
      {{# vendorExtensions.x-is-deep-object }}
      if (typeof {{paramName}} !== 'object') {
          throw new Error(`${ {{paramName}} } is not an object`);
      }
      Object.keys({{paramName}}).forEach((k) => {
          if(({{paramName}} as any)[k] instanceof Object) {
              Object.keys(({{paramName}} as any)[k]).forEach((key) => {
                    urlSearchParams.append(
                        `{{baseName}}[${k}][${key}]`,
                        ObjectSerializer.serialize(({{baseName}} as any)[k][key], 'string', '')
                    );
              });
          } else {
            urlSearchParams.append("{{baseName}}["+k+"]", ObjectSerializer.serialize(({{paramName}} as any)[k], "string", ""))
          }
      });
      {{/ vendorExtensions.x-is-deep-object }}
      {{^ vendorExtensions.x-is-deep-object }}
      {{#isArray}}
      const {{paramName}}Serialized = ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}", "{{dataFormat}}");
      {{paramName}}Serialized.forEach((v: string) => urlSearchParams.append("{{baseName}}", v));
      {{/isArray}}{{^isArray}}
      urlSearchParams.append("{{baseName}}", ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}", "{{dataFormat}}"));
      {{/isArray}}
      {{/ vendorExtensions.x-is-deep-object }}
    }
    {{#-last}}

    queryParams.searchParams = urlSearchParams;
    {{/-last}}
    {{/queryParams}}
    {{#headerParams}}
    {{#-first}}

    // Header Params
    {{/-first}}
    queryParams.headers["{{baseName}}"] = ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}", "{{dataFormat}}");
    {{/headerParams}}

    {{#bodyParam}}
    // Body Params
    const contentType = ObjectSerializer.getPreferredMediaType([{{#consumes}}
      "{{{mediaType}}}"{{^-last}},{{/-last}}
    {{/consumes}}]);
    queryParams.headers["Content-Type"] = contentType;

    queryParams.body = ObjectSerializer.stringify(
      ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}", "{{dataFormat}}"),
      contentType
    );
    {{/bodyParam}}

    queryParams.method = '{{httpMethod}}';

    {{#hasFormParams}}
    const formData = new FormData();
    {{/hasFormParams}}
    {{#formParams}}
    {{#isArray}}
    if ({{paramName}}) {
    {{#isCollectionFormatMulti}}
      {{paramName}}.forEach((element) => {
        formData.append('{{baseName}}', element);
      })
    {{/isCollectionFormatMulti}}
    {{^isCollectionFormatMulti}}
        formData.append('{{baseName}}', {{paramName}}.join(COLLECTION_FORMATS["{{collectionFormat}}"]));
    {{/isCollectionFormatMulti}}
    }
    {{/isArray}}
    {{^isArray}}

      {{^isFile}}
      if (typeof {{paramName}} !== undefined) {
         formData.append('{{baseName}}', {{paramName}});
      }
      {{/isFile}}
      {{#isFile}}
      {{#vendorExtensions.x-client-chunk-upload}}
      const chunkSize = this.httpClient.getChunkSize();
      // Upload in a single request when file is small enough
      if (chunkSize > length) {
        {{#platforms}}
        {{#node}}
          const filename = path.basename({{paramName}});
          formData.append(
            filename,
            createReadStream({{paramName}}),
            filename
          );
        {{/node}}
        {{^node}}
        formData.append('{{baseName}}', {{paramName}}, {{paramName}}.name);
        {{/node}}
        {{/platforms}}
        {{#hasFormParams}}
        queryParams.body = formData;
        {{/hasFormParams}}


        if (progressListener) {
          queryParams.onUploadProgress = (progress) => {
              progressListener({
                  chunksCount: 1,
                  currentChunk: 0,
                  currentChunkUploadedBytes: progress.loaded,
                  currentChunkTotalBytes: progress.total || 0,
                  uploadedBytes: progress.loaded,
                  totalBytes: progress.total || 0,
            });
          }
        }

        const call = this.httpClient.call(localVarPath, queryParams);

        return call.then(response => {
          return {
            headers: response.headers, 
            body: ObjectSerializer.deserialize(
              ObjectSerializer.parse(response.body, response.headers["content-type"]),
              "{{{returnType}}}", "{{returnFormat}}"
              ) as {{{returnType}}}
          }
      });
      }
      let uploadChunkSize = chunkSize;
      let lastResponse;
      let stream;
      let chunkNumber = 0;

      const partsCount = Math.ceil(length / chunkSize);
      let part = 1;

      for (let offset = 0; offset < length; offset += chunkSize, chunkNumber++) {
        // default the upload size to be as large as possible.
        uploadChunkSize = chunkSize;
        // BUT,if we are on the last chunk to be uploaded, the uploaded chunk must be
        // reduced to match the remaining bytes in the file
        if (offset + uploadChunkSize > length) {
          uploadChunkSize = length - offset;
        }

        const filename = path.basename({{paramName}});
        const chunkFormData = new FormData();
        stream = createReadStream(file, { start: offset, end: uploadChunkSize + offset - 1});
        chunkFormData.append(filename, stream, filename);

        queryParams.body = chunkFormData;
        queryParams.headers['Content-Range'] = `part ${part}/${partsCount}`;
        part++;

        if (progressListener) {
          queryParams.onUploadProgress = (progress) => {
              progressListener({
              chunksCount: Math.ceil(length / chunkSize),
              currentChunk: chunkNumber,
              currentChunkUploadedBytes: progress.loaded,
              currentChunkTotalBytes: progress.total || 0,
              uploadedBytes: Math.min(length, chunkNumber * chunkSize + progress.loaded),
              totalBytes: length,
            });
          }
        }
        const call = this.httpClient.call(localVarPath, queryParams);

        lastResponse = await call.then(response => {
          return { 
            headers: response.headers,
            body: ObjectSerializer.deserialize(
              ObjectSerializer.parse(response.body, response.headers["content-type"]),
              "{{{returnType}}}", "{{returnFormat}}"
            ) as {{{returnType}}} 
          }
      });

        stream.close();
      }

      return Promise.resolve(lastResponse!);
      {{/vendorExtensions.x-client-chunk-upload}}
      {{^vendorExtensions.x-client-chunk-upload}}
      {{#platforms}}
      {{#node}}
      formData.append({{paramName}}Name, {{paramName}}Buffer, {{paramName}}Name);
      {{/node}}
      {{^node}}
      formData.append('{{baseName}}', {{paramName}}, {{paramName}}.name);
      {{/node}}
      {{/platforms}}
      {{/vendorExtensions.x-client-chunk-upload}}
      {{/isFile}}
    {{/isArray}}
    {{/formParams}}

    {{^vendorExtensions.x-client-chunk-upload}}
    {{#hasFormParams}}
    queryParams.body = formData;
    {{/hasFormParams}}
    return this.httpClient.call(localVarPath, queryParams)
      .then(response => {
        return {
          headers: response.headers,
          body: ObjectSerializer.deserialize(
        ObjectSerializer.parse(response.body, response.headers["content-type"]),
        "{{{returnType}}}", "{{returnFormat}}"
      ) as {{{returnType}}}
        }
  });
    {{/vendorExtensions.x-client-chunk-upload}}
  }
  {{/operation}}

}
{{/operations}}
