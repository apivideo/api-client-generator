# {{classname}}{{#description}}
{{description}}{{/description}}

All URIs are relative to *{{basePath}}*

| Method | Description | HTTP request |
| ------------- | ------------- | ------------- |
{{#operations}}{{#operation}}| [**{{operationId}}()**]({{classname}}.md#{{operationId}}) | {{#summary}}{{summary}}{{/summary}} | **{{httpMethod}}** {{path}} |
{{/operation}}{{/operations}}

{{#operations}}
{{#operation}}
<a name="{{operationId}}"></a>
## **`{{operationId}}()` - {{summary}}**{{#comment}}{{^vendorExtensions.x-group-parameters}}
> {{#returnType}}{{returnType}} {{/returnType}}{{operationId}}({{#allParams}}{{{paramName}}}{{^-last}}, {{/-last}}{{/allParams}}){{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-group-parameters}}
> {{#returnType}}{{returnType}} {{/returnType}}{{operationId}}({{#requiredParams}}{{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}){{#optionalParams}}.{{paramName}}({{paramName}}){{/optionalParams}}.execute();{{/vendorExtensions.x-group-parameters}}
{{/comment}}

{{#unescape}}{{#unescapedNotes}}

{{unescapedNotes}}{{/unescapedNotes}}{{/unescape}}

### Parameters
{{^allParams}}This endpoint does not need any parameter.{{/allParams}}{{#allParams}}{{#-last}}
| Name | Type | Required | Description |
| ------------- | ------------- | ------------- | ------------- |{{/-last}}{{/allParams}}
{{#allParams}} | **{{paramName}}** | {{#isPrimitiveType}}**{{#isFile}}string \| Readable \| Buffer{{/isFile}}{{^isFile}}{{dataType}}{{/isFile}}**{{/isPrimitiveType}}{{^isPrimitiveType}}{{#isContainer}}**{{dataType}}**{{/isContainer}}{{#isFile}}**{{dataType}}**{{/isFile}}{{^isFile}}{{^isContainer}}[**{{dataType}}**](../model/{{baseType}}.md){{/isContainer}}{{/isFile}}{{/isPrimitiveType}}| {{#required}}**yes**{{/required}}{{^required}}no{{/required}}| {{description}} |
{{/allParams}}{{#vendorExtensions.x-client-chunk-upload}}| **progressListener** | **(event: UploadProgressEvent) => void \| undefined** | no | Optional upload progress listener |{{/vendorExtensions.x-client-chunk-upload}}{{#vendorExtensions.x-client-copy-from-response}}
| **{{paramName}}** | **string \| undefined** | no | Optional {{paramName}} |{{/vendorExtensions.x-client-copy-from-response}}

### Return type

Promise<{{#returnType}}{{#returnTypeIsPrimitive}}**{{returnType}}**{{/returnTypeIsPrimitive}}{{^returnTypeIsPrimitive}}[**{{returnType}}**](../model/{{returnBaseType}}.md){{/returnTypeIsPrimitive}}{{/returnType}}{{^returnType}}null (empty response body){{/returnType}}>.


{{#vendorExtensions.code-sample}}
### Example
```js
{{#unescape}}{{this}}{{/unescape}}
```
{{/vendorExtensions.code-sample}}

{{#vendorExtensions.x-client-chunk-upload}}
### Upload chunks

Large files are broken into chunks for upload. You can control the size of the chunks using the `chunkSize` parameter when you instanciate the ApiVideoClient:

```js
const client = new ApiVideoClient({
    apiKey: "YOUR_API_KEY",
    chunkSize: 50 * 1024 * 1024, // 50mb chunks
});
```

### Progressive uploads

Progressive uploads make it possible to upload a video source "progressively," i.e., before knowing the total size of the video. This is done by sending chunks of the video source file sequentially.
The last chunk is sent by calling a different method, so api.video knows that it is time to reassemble the different chunks that were received.

```js
{{^authMethods}}const client = new ApiVideoClient();{{/authMethods}}{{#authMethods}}const client = new ApiVideoClient({ apiKey: "YOUR_API_KEY" });{{/authMethods}}
{{#allParams}}{{^vendorExtensions.x-client-doc-hidden}}{{^isFile}}
{{#isBodyParam}}const {{{paramName}}} = {{{example}}}; {{/isBodyParam}}{{^isBodyParam}}const {{{paramName}}} = '{{{example}}}'; // {{{description}}}{{/isBodyParam}}
{{/isFile}}{{/vendorExtensions.x-client-doc-hidden}}{{/allParams}}
const uploadSession = client.create{{#titlecase}}{{operationId}}{{/titlecase}}ProgressiveSession({{#allParams}}{{^isFile}}{{{paramName}}}{{/isFile}}{{/allParams}});

await uploadSession.uploadPart('test/data/10m.mp4.part.a');
await uploadSession.uploadPart('test/data/10m.mp4.part.b');
const res = await uploadSession.uploadLastPart('test/data/10m.mp4.part.c'); {{#returnType}} // {{returnType}} {{/returnType}}

{{#returnType}}
console.log(result);
{{/returnType}}
```
{{/vendorExtensions.x-client-chunk-upload}}

---

{{/operation}}
{{/operations}}
