## {{npmName}}@{{npmVersion}}


{{#appDescriptionWithNewLines}}{{{appDescriptionWithNewLines}}}{{/appDescriptionWithNewLines}}


### Building

To build and compile the typescript sources to javascript use:
```
npm install
npm run build
```

### Consuming

```
npm install {{npmName}}@{{npmVersion}} --save
```


## Documentation for API Endpoints

All URIs are relative to *{{basePath}}*

{{#apiInfo}}
{{#apis}}
{{^x-client-hidden}}

### {{classname}}


#### Retrieve an instance of {{classname}}:
```javascript
const apiVideoClient = new VideoApiClient({ apiKey: "YOUR_API_TOKEN" });
const {{classVarName}} = apiVideoClient.{{classVarName}};
```

#### Endpoints

Method | HTTP request | Description
------------- | ------------- | -------------
{{#operations}}{{#operation}}{{#isDeprecated}}**(deprecated)** {{/isDeprecated}}[**{{operationId}}**]({{apiDocPath}}{{classname}}.md#{{operationId}}) | **{{httpMethod}}** {{path}} | {{#summary}}{{summary}}{{/summary}}
{{/operation}}{{/operations}}
{{/x-client-hidden}}{{/apis}}{{/apiInfo}}

## Documentation for Models

{{#models}}{{#model}} - [{{classname}}]({{modelDocPath}}{{classname}}.md)
{{/model}}{{/models}}

## Documentation for Authorization

### API token

Most endpoints required to be authenticated using the API token mechanism described in our [documentation](https://docs.api.video/reference#authentication).
The access token generation mechanism is automatically handled by the client. All you have to do is provide an API token when instantiating the ApiVideoClient:
```java
ApiVideoClient apiVideoClient = new ApiVideoClient("YOUR_API_TOKEN");
```

### Public endpoints

Some endpoints don't require authentication. These one can be called with an ApiVideoClient instantiated without API token:
```java
ApiVideoClient apiVideoClient = new ApiVideoClient();
```

## Recommendation

It's recommended to create an instance of `ApiClient` per thread in a multithreaded environment to avoid any potential issues.

## Author

{{#apiInfo}}{{#apis}}{{#-last}}{{infoEmail}}
{{/-last}}{{/apis}}{{/apiInfo}}


## TODO
- Changelog
- Fix sandbox failing test cases
  - Fix schema issues
  - Fix delete issues
  - Add analytics tests
- ...

## Migration from `@apvideo/nodejs-sdk`

### General changes

Methods which were listing objects are now called `list` instead of `search`.
They don't fetch all pages by default, this is now left to the user.
This also means the return values has changed, instead of returning an array of object,
the full response body is returned.
You must access the `data` property on the response, to retrieve the array of object.
```
{
  'data': Array<{}>;
  'pagination': Pagination;
}
```

Subtitle model is now called `Subtitle` instead of `Caption`.
> @todo rly? API is still named `captions` but model is named `Subtitle`?

Player theme API is now called `playerThemes` instead of `players`.
Live stream API is now called `liveStreams` instead of `lives`.

### Search videos with paginated results

Before (with `@apvideo/nodejs-sdk`):
```js
await client.videos.search({ currentPage: 1, pageSize: 50 })
```

After (with `@apvideo/typescript-client`):
```ts
await client.videos.list({ currentPage: 1, pageSize: 50 })
```

### Upload a video thumbnail
await client.videos.uploadThumbnail('test/data/test.jpg', videoId); -> await client.videos.uploadThumbnail(videoId, 'test/data/test.jpg');

### Pick a thumbnail from the given time code.
Before:
```js
await client.videos.updateThumbnailWithTimecode(videoId, '00:15:22.05');
```

After:
```ts
await client.videos.pickThumbnail(videoId, { timecode: '00:15:22.05' });
```
> @todo this feels stranger than before

### Upload video caption
Before:
```js
await client.captions.upload('test/data/en.vtt', { videoId, language: 'en' }).
```

After:
```ts
await client.captions.upload(videoId, 'en', 'test/data/en.vtt').
```

### Update the default caption language
Before:
```js
await client.captions.updateDefault(videoId, 'en', true);
```

After
```ts
await client.captions.update(videoId, 'en', { _default: true })
```

### Upload video chapter
Before:
```js
await client.chapters.upload('test/data/en.vtt', { videoId, language: 'en' });
```

After:
```ts
await client.chapters.upload(videoId, 'en', 'test/data/en.vtt');
```

### Create players with default values
Before:
```js
await client.players.create();
```

After:
```ts
await client.playerThemes.create({});
```

> Properties doesn't exist anymore:
```
// shapeMargin: 10,
// shapeRadius: 3,
// shapeAspect: 'flat',
// shapeBackgroundTop: 'rgba(50, 50, 50, .7)',
// shapeBackgroundBottom: 'rgba(50, 50, 50, .8)',
// linkActive: 'rgba(255, 0, 0, .75)',
```
> @todo is that normal?

### Get a player
Before:
```js
await client.players.get(playerId)
```

After:
```ts
await client.playerThemes.get(playerId)
```

### Search a player with paginate results
Before:
```js
await client.players.search({ currentPage: 1, pageSize: 50 });
```

After:
```ts
await client.playerThemes.list({ currentPage: 1, pageSize: 50 });
```

### Players
```
client.players.update(playerId, properties)
```
->
```
client.playerThemes.update(playerId, properties)
```


```client.players.uploadLogo('test/data/test.jpg', playerId, 'https://api.video')```
->
```client.playerThemes.uploadLogo(playerId,'test/data/test.jpg', 'https://api.video')```


### Create a live
```client.lives.create(name)``` -> ```client.liveStreams.create({ name });```

### Update live thumbnail
```await client.lives.uploadThumbnail('test/data/test.jpg', liveStreamId)``` -> ```client.liveStreams.uploadThumbnail(liveStreamId, 'test/data/test.jpg')```

### Delete live resource
```await client.lives.delete(liveStreamId)``` -> client.liveStreams.delete(liveStreamId)```

### Create a private live
```await client.lives.create('This is a private live', { public: false });```
->
```await client.liveStreams.create({ name: 'This is a private live', _public: false });```


### Generate a token for delegated upload
```js
await client.tokens.generate()
```
->
```ts
await client.uploadTokens.createToken({})
```

## Issues

~~Will we keep array syntax?~~
~~// public async list(title?: string, tags?: Array<string>~~
~~This isn't natural...~~


### `Video.videoId` should be required

### Video Tags should be strings string when getting a video

### Delete
```
await client.captions.delete(videoId, 'en').then((statusCode) => {
    expect(statusCode).to.equals(204);
});
```

Deleting a caption is marked as returning void, whereas it's not and should at least return a status code?

~~### Missing analytics~~
> @todo to be done
```
analytics/live-streams/
```

### Payload model
Payload models are a pain because: if all properties of payload model are optionnal, we cant detect it
I'm not able to set it as optionnal?
Or set it as optionnal somewhere else...
idea is to do smthing like
```ts
const create = ( payload = {}) => {};

// and to call
create();

// instead of
create({})
```

### Model duplication

Ex: Model Player is the same as player-creation-payload and update payload... there should be an inheritance

### `Player.playerId` should be required


###  PlayersListResponse.data should never be undefined, could be empty array though

### PlayerUpdatePayload missing properties
    // shapeMargin: 10,
    // shapeRadius: 3,
    // shapeAspect: 'flat',
    // shapeBackgroundTop: 'rgba(50, 50, 50, .7)',
    // shapeBackgroundBottom: 'rgba(50, 50, 50, .8)',
    // linkActive: 'rgba(255, 0, 0, .75)',


### 39: Property 'logo' does not exist on type 'Player'.

-> player.assets.logo ??? -> not the same property