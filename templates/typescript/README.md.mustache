# {{npmName}}

A lightweight client built in `TypeScript` for `nodejs`.

> This client is part of our generated clients built upon our [Open API schema definition](https://github.com/apivideo/API_OAS_file).

{{#appDescriptionWithNewLines}}{{{appDescriptionWithNewLines}}}{{/appDescriptionWithNewLines}}

## Installation
With `npm`:
```
npm install {{npmName}} --save
```

...or with `yarn`:
```
yarn add {{npmName}}
```

## Migration

If you're coming from [@api.video/nodejs-sdk](https://github.com/apivideo/nodejs-sdk); make sure to read our [Migration guide](./doc/MIGRATE.md) first.

## Development

To build and compile the typescript sources to javascript use:
```
npm install
npm run build
```

## Documentation for API Endpoints

All URIs are relative to *{{basePath}}*

{{#apiInfo}}
{{#apis}}
{{^x-client-hidden}}

### {{classname}}


#### Retrieve an instance of {{classname}}:
```javascript
const apiVideoClient = new VideoApiClient({ apiKey: "YOUR_API_TOKEN" });
const {{classVarName}} = apiVideoClient.{{classVarName}};
```

#### Endpoints

Method | HTTP request | Description
------------- | ------------- | -------------
{{#operations}}{{#operation}}{{#isDeprecated}}**(deprecated)** {{/isDeprecated}}[**{{operationId}}**]({{apiDocPath}}{{classname}}.md#{{operationId}}) | **{{httpMethod}}** {{path}} | {{#summary}}{{summary}}{{/summary}}
{{/operation}}{{/operations}}
{{/x-client-hidden}}{{/apis}}{{/apiInfo}}

## Documentation for Models

{{#models}}{{#model}} - [{{classname}}]({{modelDocPath}}{{classname}}.md)
{{/model}}{{/models}}

## Documentation for Authorization

### API token

Most endpoints required to be authenticated using the API token mechanism described in our [documentation](https://docs.api.video/reference#authentication).
The access token generation mechanism is automatically handled by the client.

All you have to do is provide an API token when instantiating the ApiVideoClient:
```js
const client = new ApiVideoClient({ apiKey: "YOUR_API_TOKEN" });
```

### Public endpoints

Some endpoints don't require authentication. These one can be called with an ApiVideoClient instantiated without API token:
```js
const client = new ApiVideoClient();
```

## Recommendation

It's recommended to create an instance of `ApiVideoClient` per thread in a multithreaded environment to avoid any potential issues.

## Author

{{#apiInfo}}{{#apis}}{{#-last}}{{infoEmail}}
{{/-last}}{{/apis}}{{/apiInfo}}


## TODO
- Fix delete issues
- ...

## Issues

### Model duplication

Ex: Model Player is the same as player-creation-payload and update payload... there should be an inheritance

Generation get strange when, using inheritance, most client generate shit.
It would require a lot of efforts to rewrite clients and would crash all clients.
It might be a pain to maintained.


    # Automation pipeline (previous notes)
https://github.com/apivideo/API_OAS_file
> __Other example__
> https://github.com/LePetitBloc/bitcoin-swagger
> I think it was based on the petstore idea there:
> https://github.com/swagger-api/swagger-petstore




https://github.com/apivideo/api-client-generator
> https://github.com/openapitools/openapi-generator/wiki/FAQ


  -

Might be intersting to work with docker version :
https://github.com/openapitools/openapi-generator/wiki/FAQ#how-to-test-with-the-latest-master-of-openapi-generator

This would avoid to rely on java.

Or just use the node version <3

```
# install the latest version of "openapi-generator-cli"
npm install @openapitools/openapi-generator-cli -g
# use a specific version of "openapi-generator-cli"
openapi-generator-cli version-manager set 5.0.1
# Or install it as dev-dependency in your node.js projects
npm install @openapitools/openapi-generator-cli -D
```


# Automation pipeline

```mermaid
sequenceDiagram
    apivideo/openapi->>+apivideo/generator: Dispatch update event
    apivideo/generator->>+apivideo/some-client: Build, commit and push to
```
> https://mermaid-js.github.io/mermaid/#/sequenceDiagram

1. Checkout generator repo
2. Checkout `profile` repository in `generetated/${profile}/`
3. Git branch `name-of-the-branch?`
4. Generate client
5. Commit with same commit message as the last commit on the generator
6. Submit PR to `profile.repository`
7.

```
./git_push.sh
```
> https://openapi-generator.tech/docs/integrations/#github-integration
> https://github.com/OpenAPITools/openapi-generator/commit/3bebbada98234b58934804fa58f538170d991b69

> https://github.com/actions/checkout/


> https://openapi-generator.tech/docs/faq-extending/#how-do-i-skip-files-during-code-generation


## Generator action

```
# .github/actions/update-client-action
inputs:
   profile:
       description: 'Name of the profile'
       required: true
   repository: # could be read with INPUT_REPOSITORY
       description: 'Repository name organization/repository-name'
       required: true
outputs:
```
> Then create a file:
> https://github.com/actions/hello-world-javascript-action/blob/main/index.js
> https://github.com/actions/toolkit/tree/main/packages/github#usage

```
# .github/workflows/typescript-example.yml

strategy:
  matrix:
    profile: ['typescript', 'java']
steps:
- name: Check out repository code
  uses: actions/checkout@v2

- name: Checkout typescript client
  uses: actions/checkout@v2
  with:
    repository: ${{ repository }}
    token: ${{ secrets.GitHub_PAT }} # `GitHub_PAT` is a secret that contains your PAT
    path: generated-clients/typescript

- run: echo "Hello guys"
- run: echo "Hello guys"
- run: echo "ðŸŽ‰ The job was automatically triggered by a ${{ github.event_name }} event."
```

## Resources
- https://github.community/t/triggering-by-other-repository/16163/6
- https://docs.github.com/en/actions/reference/events-that-trigger-workflows
- https://docs.github.com/en/rest/reference/actions#create-a-workflow-dispatch-event


# Typescript

https://github.com/openapitools/openapi-generator/wiki/FAQ#typescript

Once pushed on the repo...
1. https://github.com/marketplace/actions/github-releases
2. npm release
3.
