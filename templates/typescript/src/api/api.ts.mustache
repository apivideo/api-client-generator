import { URLSearchParams } from 'url';
import FormData from "form-data";
import { ObjectSerializer } from '{{ modelPackage }}/ObjectSerializer';
import HttpClient, { QueryOptions } from '../HttpClient';
{{#imports}}
import { {{classname}} } from '{{filename}}';
{{/imports}}
{{#operations}}

/**
 * {{#description}}{{{description}}}{{/description}}{{^description}}no description{{/description}}
 */
export class {{classname}} {
    private httpClient: HttpClient;

    constructor(httpClient: HttpClient) {
        this.httpClient = httpClient;
    }

    {{#operation}}
    /**
     {{#notes}}
     * {{&notes}}
     {{/notes}}
     {{#summary}}
     * {{&summary}}
     {{/summary}}
     {{#allParams}}
     * @param {{paramName}} {{description}}
     {{/allParams}}
     */
    public async {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{^-last}}, {{/-last}}{{/allParams}}): Promise<{{#returnType}}{{{returnType}}}{{/returnType}} {{^returnType}}void{{/returnType}}> {
        const queryParams: QueryOptions = {};

        queryParams.headers = {};
        {{#allParams}}

        {{#required}}
        // verify required parameter '{{paramName}}' is not null or undefined
        if ({{paramName}} === null || {{paramName}} === undefined) {
            throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
        }

        {{/required}}
        {{/allParams}}
        // Path Params
        const localVarPath = '{{{path}}}'.substring(1){{#pathParams}}
            .replace('{' + '{{baseName}}' + '}', encodeURIComponent(String({{paramName}}))){{/pathParams}};
        {{#queryParams}}
        {{#-first}}

        // Query Params
        const urlSearchParams = new URLSearchParams();

        {{/-first}}
        if ({{paramName}} !== undefined) {
            urlSearchParams.append("{{baseName}}", ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}", "{{dataFormat}}"));
        }
        {{#-last}}

        queryParams.searchParams = urlSearchParams;
        {{/-last}}
        {{/queryParams}}
        {{#headerParams}}
        {{#-first}}

        // Header Params
        {{/-first}}
        queryParams.headers["{{baseName}}"] = ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}", "{{dataFormat}}");
        {{/headerParams}}
        {{#hasFormParams}}

        // Form Params
        let localVarFormParams = new FormData();

        {{/hasFormParams}}
        {{#formParams}}
        {{#isArray}}
        if ({{paramName}}) {
        {{#isCollectionFormatMulti}}
            {{paramName}}.forEach((element) => {
                localVarFormParams.append('{{baseName}}', element as any);
            })
        {{/isCollectionFormatMulti}}
        {{^isCollectionFormatMulti}}
                localVarFormParams.append('{{baseName}}', {{paramName}}.join(COLLECTION_FORMATS["{{collectionFormat}}"]));
        {{/isCollectionFormatMulti}}
        }
        {{/isArray}}
        {{^isArray}}
        if ({{paramName}} !== undefined) {
             {{^isFile}}
             localVarFormParams.append('{{baseName}}', {{paramName}} as any);
             {{/isFile}}
             {{#isFile}}
             {{#platforms}}
             {{#node}}
             localVarFormParams.append('{{baseName}}', {{paramName}}.data, {{paramName}}.name);
             {{/node}}
             {{^node}}
             localVarFormParams.append('{{baseName}}', {{paramName}}, {{paramName}}.name);
             {{/node}}
             {{/platforms}}
             {{/isFile}}
        }
        {{/isArray}}
        {{/formParams}}
        {{#hasFormParams}}
        queryParams.form = localVarFormParams;
        {{/hasFormParams}}
        {{#bodyParam}}

        // Body Params
        const contentType = ObjectSerializer.getPreferredMediaType([{{#consumes}}
            "{{{mediaType}}}"{{^-last}},{{/-last}}
        {{/consumes}}]);
        queryParams.headers["Content-Type"] = contentType;

        queryParams.body = ObjectSerializer.stringify(
            ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}", "{{dataFormat}}"),
            contentType
        );;
        {{/bodyParam}}

        queryParams.method = '{{httpMethod}}';

        return this.httpClient.call(localVarPath, queryParams)
            .then(response => ObjectSerializer.deserialize(
                ObjectSerializer.parse(response.body, response.headers["content-type"]),
                "{{{returnType}}}", "{{returnFormat}}"
            ) as {{{returnType}}});
    }

    {{/operation}}
}
{{/operations}}
