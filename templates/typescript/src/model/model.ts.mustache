{{>licenseInfo}}
import AttributeType from './AttributeType';
{{#models}}
{{#model}}
{{#tsImports}}
import {{classname}} from './{{filename}}';
{{/tsImports}}

{{#description}}
/**
* {{{description}}}
*/
{{/description}}
{{^isEnum}}
export default class {{classname}} {{#parent}}extends {{{parent}}} {{/parent}}{
{{#vars}}
{{#description}}
  /**
  * {{{description}}}
  */
{{/description}}
  '{{name}}'{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}};
{{/vars}}

  {{#discriminator}}
  static readonly discriminator?: string = "{{discriminatorName}}";
  {{/discriminator}}
  {{^discriminator}}
  static readonly discriminator?: string = undefined;
  {{/discriminator}}

  {{^isArray}}
  static readonly attributeTypeMap: Array<AttributeType> = [
    {{#vars}}
    {
      "name": "{{name}}",
      "baseName": "{{baseName}}",
      "type": "{{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}",
      "format": "{{dataFormat}}"
    }{{^-last}},
    {{/-last}}
    {{/vars}}
  ];

  static getAttributeTypeMap(): Array<AttributeType> {
    {{#parent}}
    return super.getAttributeTypeMap().concat({{classname}}.attributeTypeMap);
    {{/parent}}
    {{^parent}}
    return {{classname}}.attributeTypeMap;
    {{/parent}}
  }
  {{/isArray}}

  {{#allVars.length}}
  public constructor() {
    {{#parent}}
    super();
    {{/parent}}
    {{#allVars}}
    {{#discriminatorValue}}
    this.{{name}} = "{{discriminatorValue}}";
    {{/discriminatorValue}}
    {{/allVars}}
    {{#discriminatorName}}
    this.{{discriminatorName}} = "{{classname}}";
    {{/discriminatorName}}
  }
  {{/allVars.length}}
}

{{#hasEnums}}
{{#vars}}
{{#isEnum}}
export type {{classname}}{{enumName}} ={{#allowableValues}}{{#values}} "{{.}}" {{^-last}}|{{/-last}}{{/values}}{{/allowableValues}};
{{/isEnum}}
{{/vars}}
{{/hasEnums}}
{{/isEnum}}
{{#isEnum}}
export type {{classname}} ={{#allowableValues}}{{#values}} "{{.}}" {{^-last}}|{{/-last}}{{/values}}{{/allowableValues}};
{{/isEnum}}
{{/model}}
{{/models}}
