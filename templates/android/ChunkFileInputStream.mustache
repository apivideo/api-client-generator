package {{invokerPackage}}.upload;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.function.Consumer;

public class ChunkFileInputStream extends BufferedInputStream {
    private final Consumer<Long> progressListener;

    public ChunkFileInputStream(File file, long start, long end, Consumer<Long> progressListener) throws IOException {
        super(new FileInputStream(file));
        this.progressListener = progressListener;

        this.mark((int) (end - start));
        this.reset();
        progressListener.accept((long) markpos);
    }

    @Override
    public int read() throws IOException {
        if (markpos + pos % 1024 == 0) {
            progressListener.accept((long) (markpos + pos));
        }

        return super.read();
    }

    @Override
    public int read(byte[] b, int off, int len) throws IOException {
        progressListener.accept((long) (markpos + pos));
        return super.read(b, off, len);
    }
}
