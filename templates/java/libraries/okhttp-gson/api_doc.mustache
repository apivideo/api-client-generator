# {{classname}}{{#description}}
{{description}}{{/description}}

All URIs are relative to *{{basePath}}*

Method | HTTP request | Description
------------- | ------------- | -------------
{{#operations}}{{#operation}}[**{{operationId}}**]({{classname}}.md#{{operationId}}) | **{{httpMethod}}** {{path}} | {{#summary}}{{summary}}{{/summary}}
{{/operation}}{{/operations}}

{{#operations}}
{{#operation}}
<a name="{{operationId}}"></a>
# **{{operationId}}**{{^vendorExtensions.x-group-parameters}}
> {{#returnType}}{{returnType}} {{/returnType}}{{operationId}}({{#allParams}}{{{paramName}}}{{^-last}}, {{/-last}}{{/allParams}})
> okhttp3.Call {{operationId}}Async({{#allParams}}{{{paramName}}}, {{/allParams}}callback)
> ApiResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}> {{operationId}}WithHttpInfo({{#allParams}}{{#useBeanValidation}}{{>beanValidationQueryParams}}{{/useBeanValidation}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}}){{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-group-parameters}}
> {{#returnType}}{{returnType}} {{/returnType}}{{operationId}}({{#requiredParams}}{{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}){{#optionalParams}}.{{paramName}}({{paramName}}){{/optionalParams}}.execute()
> okhttp3.Call executeAsync(callback) 
> ApiResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}> executeWithHttpInfo(){{/vendorExtensions.x-group-parameters}}

{{#unescape}}{{summary}}{{#notes}}

{{notes}}{{/notes}}{{/unescape}}

{{#vendorExtensions.code-sample}}
### Example
```java
{{#unescape}}{{this}}{{/unescape}}
```
{{/vendorExtensions.code-sample}}
{{^vendorExtensions.code-sample}}
### Example
```java
// Import classes:
{{#client}}
import video.api.client.ApiVideoClient;
{{/client}}
import {{{invokerPackage}}}.ApiException;
import {{{invokerPackage}}}.models.*;
import {{{package}}}.{{{classname}}};
import java.util.*;

public class Example {
  public static void main(String[] args) {
    {{#client}}
    {{^authMethods}}
    ApiVideoClient client = new ApiVideoClient();
    // if you rather like to use the sandbox environment:
    // ApiVideoClient client = new ApiVideoClient(Environment.SANDBOX);
    {{/authMethods}}
    {{#authMethods}}
    ApiVideoClient client = new ApiVideoClient("YOUR_API_KEY");
    // if you rather like to use the sandbox environment:
    // ApiVideoClient client = new ApiVideoClient("YOUR_SANDBOX_API_KEY", Environment.SANDBOX);
    {{/authMethods}}

    {{{classname}}} apiInstance = client.{{classVarName}}();
    {{/client}}
    {{^client}}
    {{^authMethods}}
    {{{classname}}} apiInstance = {{classVarName}}();
    // if you rather like to use the sandbox environment:
    //  {{{classname}}} apiInstance = new {{classVarName}}(Environment.SANDBOX);
    {{/authMethods}}
    {{#authMethods}}
    {{{classname}}} apiInstance = new {{classVarName}}("YOUR_API_KEY");
    // if you rather like to use the sandbox environment:
    // {{{classname}}} apiInstance = new {{classVarName}}("YOUR_SANDBOX_API_KEY", Environment.SANDBOX);
    {{/authMethods}}
    {{/client}}
    {{#allParams}}{{^vendorExtensions.x-client-doc-hidden}}
    {{{dataType}}} {{{paramName}}} = {{{example}}}; // {{{description}}}{{/vendorExtensions.x-client-doc-hidden}}{{#isModel}}
    {{#vars}}
    {{{paramName}}}.{{setter}}({{#unescape}}{{example}}{{/unescape}}); // {{ unescapedDescription }}
    {{/vars}}
{{/isModel}}{{/allParams}}

    try {
      {{#returnType}}{{#vendorExtensions.x-client-paginated}}Page<{{vendorExtensions.x-pagination.type}}>{{/vendorExtensions.x-client-paginated}}{{^vendorExtensions.x-client-paginated}}{{returnType}}{{/vendorExtensions.x-client-paginated}} result = {{/returnType}}apiInstance.{{{operationId}}}{{^vendorExtensions.x-group-parameters}}({{#allParams}}{{{paramName}}}{{^-last}}, {{/-last}}{{/allParams}});{{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-group-parameters}}({{#requiredParams}}{{{paramName}}}{{^-last}}, {{/-last}}{{/requiredParams}}){{#optionalParams}}
            .{{{paramName}}}({{{paramName}}}){{/optionalParams}}
            .execute();{{/vendorExtensions.x-group-parameters}}{{#returnType}}
      System.out.println(result);{{/returnType}}
    } catch (ApiException e) {
      System.err.println("Exception when calling {{{classname}}}#{{{operationId}}}");
      System.err.println("Status code: " + e.getCode());
      System.err.println("Reason: " + e.getMessage());
      System.err.println("Response headers: " + e.getResponseHeaders());
      e.printStackTrace();
    }
  }
}
```
{{/vendorExtensions.code-sample}}

### Parameters
{{^allParams}}This endpoint does not need any parameter.{{/allParams}}{{#allParams}}{{#-last}}
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------{{/-last}}{{/allParams}}
{{#allParams}} **{{paramName}}** | {{#isPrimitiveType}}**{{dataType}}**{{/isPrimitiveType}}{{^isPrimitiveType}}{{#isFile}}**{{dataType}}**{{/isFile}}{{^isFile}}[**{{dataType}}**]({{baseType}}.md){{/isFile}}{{/isPrimitiveType}}| {{description}} |{{^required}} [optional]{{/required}}{{^isContainer}}{{#defaultValue}} [default to {{defaultValue}}]{{/defaultValue}}{{/isContainer}}{{#allowableValues}} [enum: {{#values}}{{{.}}}{{^-last}}, {{/-last}}{{/values}}]{{/allowableValues}}
{{/allParams}}{{#vendorExtensions.x-client-chunk-upload}}

### Upload chunks

Large files are broken into chunks for upload. You can control the size of the chunks using the `setUploadChunkSize()` of method of `ApiVideoClient` before uploading:

```java
apiVideoClient.setUploadChunkSize(50*1024*1024); // use 50MB chunks
apiVideoClient.{{classVarName}}().{{{operationId}}}{{^vendorExtensions.x-group-parameters}}({{#allParams}}{{{paramName}}}{{^-last}}, {{/-last}}{{/allParams}});{{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-group-parameters}}({{#requiredParams}}{{{paramName}}}{{^-last}}, {{/-last}}{{/requiredParams}}){{#optionalParams}}
    .{{{paramName}}}({{{paramName}}}){{/optionalParams}}
    .execute();{{/vendorExtensions.x-group-parameters}}
```

### Progressive uploads

Progressive uploads make it possible to upload a video source "progressively," i.e., before knowing the total size of the video. This is done by sending chunks of the video source file sequentially.
The last chunk is sent by calling a different method, so api.video knows that it is time to reassemble the different chunks that were received.

```java
{{#allParams}}{{^vendorExtensions.x-client-doc-hidden}}{{^isFile}}{{{dataType}}} {{{paramName}}} = {{{example}}}; // {{{description}}}{{/isFile}}{{/vendorExtensions.x-client-doc-hidden}}{{/allParams}};

{{#titlecase}}{{operationId}}{{/titlecase}}ProgressiveSession session = apiVideoClient.create{{#titlecase}}{{operationId}}{{/titlecase}}ProgressiveSession({{#allParams}}{{^isFile}}{{paramName}}{{/isFile}}{{/allParams}})

session.uploadPart(new File("sample.mp4.part1"));
session.uploadPart(new File("sample.mp4.part2"));
// ...
{{returnType}} result = session.uploadLastPart(new File("sample.mp4.partn"));
```

{{/vendorExtensions.x-client-chunk-upload}}

### Return type

{{#returnType}}{{#vendorExtensions.x-client-paginated}}[**Page**](pagination.md)<[**{{vendorExtensions.x-pagination.type}}**]({{vendorExtensions.x-pagination.type}}.md)>{{/vendorExtensions.x-client-paginated}}{{/returnType}}
{{^vendorExtensions.x-client-paginated}}{{#returnType}}{{#returnTypeIsPrimitive}}**{{returnType}}**{{/returnTypeIsPrimitive}}{{^returnTypeIsPrimitive}}[**{{returnType}}**]({{returnBaseType}}.md){{/returnTypeIsPrimitive}}{{/returnType}}{{^returnType}}null (empty response body){{/returnType}}{{/vendorExtensions.x-client-paginated}}

### Authorization

{{^authMethods}}No authorization required{{/authMethods}}{{#authMethods}}[API key](../README.md#api-key){{^-last}}, {{/-last}}{{/authMethods}}

### HTTP request headers

 - **Content-Type**: {{#consumes}}{{{mediaType}}}{{^-last}}, {{/-last}}{{/consumes}}{{^consumes}}Not defined{{/consumes}}
 - **Accept**: {{#produces}}{{{mediaType}}}{{^-last}}, {{/-last}}{{/produces}}{{^produces}}Not defined{{/produces}}

{{#responses.0}}
### HTTP response details
| Status code | Description | Response headers |
|-------------|-------------|------------------|
{{#responses}}
**{{code}}** | {{message}} | {{#headers}} * {{baseName}} - {{description}} <br> {{/headers}}{{^headers.0}} - {{/headers.0}} |
{{/responses}}
{{/responses.0}}

{{/operation}}
{{/operations}}
