{{>partial_header}}
package {{packageName}}
{{#operations}}
import (
	"context"
	"net/http"
    "net/url"
{{#imports}}	"{{import}}"
{{/imports}}
)
// Linger please
var (
	_ context.Context
)
{{#x-client-chunk-upload}}

// VideosService communicating with the Videos
// endpoints of the api.video API
type IUploadStream interface {
    UploadPart(fileName string, fileReader io.Reader, fileSize int64) (*Video, error)
    UploadPartWithContext(ctx context.Context, fileName string, fileReader io.Reader, fileSize int64) (*Video, error)
    UploadPartFile(file *os.File) (*Video, error)
    UploadPartWithContextFile(ctx context.Context, file *os.File) (*Video, error)
    UploadLastPart(fileName string, fileReader io.Reader, fileSize int64) (*Video, error)
    UploadLastPartWithContext(ctx context.Context, fileName string, fileReader io.Reader, fileSize int64) (*Video, error)
    UploadLastPartFile(file *os.File) (*Video, error)
    UploadLastPartWithContextFile(ctx context.Context, file *os.File) (*Video, error)
}

{{/x-client-chunk-upload}}

{{#operation}}
{{#vendorExtensions.x-group-parameters}}
type {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request struct { {{#allParams}}
    {{^isPathParam}}{{paramName}} *{{{dataType}}}{{/isPathParam}}{{/allParams}}
}
{{#allParams}}{{^isPathParam}}
func (r {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request) {{vendorExtensions.x-export-param-name}}({{paramName}} {{{dataType}}}) {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request {
	r.{{paramName}} = &{{paramName}}
	return r
}{{/isPathParam}}{{/allParams}}
{{/vendorExtensions.x-group-parameters}}
{{/operation}}

{{#generateInterfaces}}


type {{classname}}ServiceI interface {
	{{#operation}}
	/*
	 * {{operationId}}{{#summary}} {{{.}}}{{/summary}}{{^summary}} Method for {{operationId}}{{/summary}}{{#pathParams}}
	 * @param {{paramName}}{{#description}} {{{.}}}{{/description}}{{/pathParams}}
	 * @return {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request
	 */
	{{#vendorExtensions.x-upload}}{{nickname}}({{#allParams}}{{^isFile}}{{paramName}} {{^required}}*{{/required}}{{{dataType}}}, {{/isFile}}{{/allParams}}fileName string, fileReader io.Reader{{#vendorExtensions.x-client-chunk-upload}}, fileSize int64{{/vendorExtensions.x-client-chunk-upload}}) ({{#returnType}}*{{{.}}}, {{/returnType}}error) {{/vendorExtensions.x-upload}}{{^vendorExtensions.x-upload}}
	{{#vendorExtensions.x-group-parameters}}{{nickname}}({{#pathParams}}{{paramName}} {{{dataType}}}, {{/pathParams}}r {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request) ({{#returnType}}*{{{.}}}, {{/returnType}}error)
	{{/vendorExtensions.x-group-parameters}}{{^vendorExtensions.x-group-parameters}}{{nickname}}({{#requiredParams}}{{paramName}} {{{dataType}}}{{^-last}}, {{/-last}}{{/requiredParams}}) ({{#returnType}}*{{{.}}}, {{/returnType}}error){{/vendorExtensions.x-group-parameters}}
	{{/vendorExtensions.x-upload}}

	/*
	 * {{operationId}}{{#summary}} {{{.}}}{{/summary}}{{^summary}} Method for {{operationId}}{{/summary}}
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().{{#pathParams}}
	 * @param {{paramName}}{{#description}} {{{.}}}{{/description}}{{/pathParams}}
	 * @return {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request
	 */
    {{#vendorExtensions.x-upload}}{{nickname}}WithContext(ctx context.Context{{#allParams}}{{^isFile}}, {{paramName}} {{^required}}*{{/required}}{{{dataType}}}{{/isFile}}{{/allParams}}, fileName string, fileReader io.Reader{{#vendorExtensions.x-client-chunk-upload}}, fileSize int64{{/vendorExtensions.x-client-chunk-upload}}) ({{#returnType}}*{{{.}}}, {{/returnType}}error) {{/vendorExtensions.x-upload}}{{^vendorExtensions.x-upload}}
    {{#vendorExtensions.x-group-parameters}}{{nickname}}WithContext(ctx context.Context{{#pathParams}}, {{paramName}} {{{dataType}}}{{/pathParams}}, r {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request) ({{#returnType}}*{{{.}}}, {{/returnType}}error)
    {{/vendorExtensions.x-group-parameters}}{{^vendorExtensions.x-group-parameters}}{{nickname}}WithContext(ctx context.Context{{#requiredParams}}, {{paramName}} {{{dataType}}}{{/requiredParams}}) ({{#returnType}}*{{{.}}}, {{/returnType}}error){{/vendorExtensions.x-group-parameters}}
    {{/vendorExtensions.x-upload}}

    {{#vendorExtensions.x-client-chunk-upload}}

	/*
	 * {{operationId}}{{#summary}} {{{.}}}{{/summary}}{{^summary}} Method for {{operationId}}{{/summary}}{{#pathParams}}
	 * @param {{paramName}}{{#description}} {{{.}}}{{/description}}{{/pathParams}}
	 * @return IUploadStream
	 */
    Create{{nickname}}Stream({{#allParams}}{{^isFile}}{{paramName}} {{^required}}*{{/required}}{{{dataType}}}{{^-last}}, {{/-last}}{{/isFile}}{{/allParams}}{{#vendorExtensions.x-client-copy-from-response}}{{paramName}} *{{dataType}}{{/vendorExtensions.x-client-copy-from-response}}) (IUploadStream, error)
    {{/vendorExtensions.x-client-chunk-upload}}

    {{#vendorExtensions.x-upload}}
	/*
	 * {{operationId}}{{#summary}} {{{.}}}{{/summary}}{{^summary}} Method for {{operationId}}{{/summary}}{{#pathParams}}
	 * @param {{paramName}}{{#description}} {{{.}}}{{/description}}{{/pathParams}}
	 * @return {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request
	 */{{#vendorExtensions.x-group-parameters}}
	{{nickname}}File({{#pathParams}}{{paramName}} {{{dataType}}}, {{/pathParams}}r {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request) ({{#returnType}}*{{{.}}}, {{/returnType}}error) {{/vendorExtensions.x-group-parameters}}
	{{^vendorExtensions.x-group-parameters}}{{nickname}}File({{#allParams}}{{paramName}} {{^required}}*{{/required}}{{{dataType}}}{{^-last}}, {{/-last}}{{/allParams}}) ({{#returnType}}*{{{.}}}, {{/returnType}}error) {{/vendorExtensions.x-group-parameters}}
 
    /*
	 * {{operationId}}{{#summary}} {{{.}}}{{/summary}}{{^summary}} Method for {{operationId}}{{/summary}}
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().{{#pathParams}}
	 * @param {{paramName}}{{#description}} {{{.}}}{{/description}}{{/pathParams}}
	 * @return {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request
	 */{{#vendorExtensions.x-group-parameters}}
    {{nickname}}FileWithContext(ctx context.Context{{#pathParams}}, {{paramName}} {{{dataType}}}{{/pathParams}}, r {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request) ({{#returnType}}*{{{.}}}, {{/returnType}}error) {{/vendorExtensions.x-group-parameters}}
    {{^vendorExtensions.x-group-parameters}}{{nickname}}FileWithContext(ctx context.Context{{#allParams}}, {{paramName}} {{^required}}*{{/required}}{{{dataType}}}{{/allParams}}) ({{#returnType}}*{{{.}}}, {{/returnType}}error) {{/vendorExtensions.x-group-parameters}}
    
	{{#vendorExtensions.x-client-copy-from-response}}
	/*
	 * {{operationId}}{{#summary}} {{{.}}}{{/summary}}{{^summary}} Method for {{operationId}}{{/summary}}{{#pathParams}}
	 * @param videoId *string the video id or nil
	 * @param {{paramName}}{{#description}} {{{.}}}{{/description}}{{/pathParams}}
	 * @return {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request
	 */
	{{nickname}}WithVideoId(videoId *string{{#allParams}}{{^isFile}}, {{paramName}} {{^required}}*{{/required}}{{{dataType}}}, {{/isFile}}{{/allParams}}fileName string, fileReader io.Reader, fileSize int64) ({{#returnType}}*{{{.}}}, {{/returnType}}error)

	/*
	 * {{operationId}}{{#summary}} {{{.}}}{{/summary}}{{^summary}} Method for {{operationId}}{{/summary}}
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().{{#pathParams}}
	 * @param videoId *string the video id or nil
	 * @param {{paramName}}{{#description}} {{{.}}}{{/description}}{{/pathParams}}
	 * @return {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request
	 */
    {{nickname}}WithContextAndVideoId(ctx context.Context, videoId *string{{#allParams}}{{^isFile}}, {{paramName}} {{^required}}*{{/required}}{{{dataType}}}{{/isFile}}{{/allParams}}, fileName string, fileReader io.Reader, fileSize int64) ({{#returnType}}*{{{.}}}, {{/returnType}}error)

	/*
	 * {{operationId}}{{#summary}} {{{.}}}{{/summary}}{{^summary}} Method for {{operationId}}{{/summary}}{{#pathParams}}
	 * @param videoId *string the video id or nil
	 * @param {{paramName}}{{#description}} {{{.}}}{{/description}}{{/pathParams}}
	 * @return {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request
	 */{{#vendorExtensions.x-group-parameters}}
	{{nickname}}FileWithVideoId(videoId *string{{#pathParams}}, {{paramName}} {{{dataType}}}, {{/pathParams}}r {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request) ({{#returnType}}*{{{.}}}, {{/returnType}}error) {{/vendorExtensions.x-group-parameters}}
	{{^vendorExtensions.x-group-parameters}}{{nickname}}FileWithVideoId(videoId *string, {{#allParams}}{{paramName}} {{^required}}*{{/required}}{{{dataType}}}{{^-last}}, {{/-last}}{{/allParams}}) ({{#returnType}}*{{{.}}}, {{/returnType}}error) {{/vendorExtensions.x-group-parameters}}
 
    /*
	 * {{operationId}}{{#summary}} {{{.}}}{{/summary}}{{^summary}} Method for {{operationId}}{{/summary}}
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().{{#pathParams}}
	 * @param videoId *string the video id or nil
	 * @param {{paramName}}{{#description}} {{{.}}}{{/description}}{{/pathParams}}
	 * @return {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request
	 */{{#vendorExtensions.x-group-parameters}}
    {{nickname}}FileWithContextAndVideoId(ctx context.Context, videoId *string{{#pathParams}}, {{paramName}} {{{dataType}}}{{/pathParams}}, r {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request) ({{#returnType}}*{{{.}}}, {{/returnType}}error) {{/vendorExtensions.x-group-parameters}}
    {{^vendorExtensions.x-group-parameters}}{{nickname}}FileWithContextAndVideoId(ctx context.Context, videoId *string{{#allParams}}, {{paramName}} {{^required}}*{{/required}}{{{dataType}}}{{/allParams}}) ({{#returnType}}*{{{.}}}, {{/returnType}}error) {{/vendorExtensions.x-group-parameters}}
	{{/vendorExtensions.x-client-copy-from-response}}
	{{/vendorExtensions.x-upload}}
    {{/operation}}
}
{{/generateInterfaces}}

// {{classname}}Service communicating with the {{classname}}
// endpoints of the api.video API
type {{classname}}Service struct {
    client *Client
}
{{#operation}}

{{#vendorExtensions.x-upload}}
/*
 * {{operationId}}{{#summary}} {{{.}}}{{/summary}}{{^summary}} Method for {{operationId}}{{/summary}}
{{#notes}}
 * {{{unescapedNotes}}}
{{/notes}}{{#pathParams}}
 * @param {{paramName}}{{#description}} {{{.}}}{{/description}}{{/pathParams}}
 * @return {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request
 */
 {{#vendorExtensions.x-group-parameters}}func (s *{{{classname}}}Service) {{nickname}}File({{#pathParams}}{{paramName}} {{{dataType}}}, {{/pathParams}}r {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request) ({{#returnType}}*{{{.}}}, {{/returnType}}error) { {{/vendorExtensions.x-group-parameters}}
 {{^vendorExtensions.x-group-parameters}}
 func (s *{{{classname}}}Service) {{nickname}}File({{#allParams}}{{paramName}} {{^required}}*{{/required}}{{{dataType}}}{{^-last}}, {{/-last}}{{/allParams}}) ({{#returnType}}*{{{.}}}, {{/returnType}}error) { {{/vendorExtensions.x-group-parameters}}
	 return s.{{nickname}}FileWithContext{{#vendorExtensions.x-client-copy-from-response}}AndVideoId{{/vendorExtensions.x-client-copy-from-response}}(context.Background(){{#vendorExtensions.x-client-copy-from-response}}, nil{{/vendorExtensions.x-client-copy-from-response}}{{#allParams}}, {{paramName}}{{/allParams}})
 }

/*
 * {{operationId}}{{#summary}} {{{.}}}{{/summary}}{{^summary}} Method for {{operationId}}{{/summary}}
{{#notes}}
 * {{{unescapedNotes}}}
{{/notes}}
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().{{#pathParams}}
 * @param {{paramName}}{{#description}} {{{.}}}{{/description}}{{/pathParams}}
 * @return {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request
 */
{{#vendorExtensions.x-group-parameters}}func (s *{{{classname}}}Service) {{nickname}}FileWithContext(ctx context.Context{{#pathParams}}{{paramName}}, {{{dataType}}}{{/pathParams}}r {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request) ({{#returnType}}*{{{.}}}, {{/returnType}}error) { {{/vendorExtensions.x-group-parameters}}
{{^vendorExtensions.x-group-parameters}}
func (s *{{{classname}}}Service) {{nickname}}FileWithContext(ctx context.Context{{#allParams}}, {{paramName}} {{^required}}*{{/required}}{{{dataType}}}{{/allParams}}) ({{#returnType}}*{{{.}}}, {{/returnType}}error) { {{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-client-chunk-upload}}
    fileInfo, _  := file.Stat()
    fileSize := fileInfo.Size()
{{/vendorExtensions.x-client-chunk-upload}}

    return s.{{nickname}}WithContext{{#vendorExtensions.x-client-copy-from-response}}AndVideoId{{/vendorExtensions.x-client-copy-from-response}}(ctx, {{#vendorExtensions.x-client-copy-from-response}}nil, {{/vendorExtensions.x-client-copy-from-response}}{{#allParams}}{{^isFile}}{{paramName}}, {{/isFile}}{{/allParams}}file.Name(), io.Reader(file){{#vendorExtensions.x-client-chunk-upload}}, fileSize{{/vendorExtensions.x-client-chunk-upload}})
}
{{#vendorExtensions.x-client-copy-from-response}}

/*
 * {{operationId}}{{#summary}} {{{.}}}{{/summary}}{{^summary}} Method for {{operationId}}{{/summary}}
{{#notes}}
 * {{{unescapedNotes}}}
{{/notes}}{{#pathParams}}
 * @param videoId *string the video id or nil
 * @param {{paramName}}{{#description}} {{{.}}}{{/description}}{{/pathParams}}
 * @return {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request
 */
 {{#vendorExtensions.x-group-parameters}}func (s *{{{classname}}}Service) {{nickname}}FileWithVideoId(videoId *string, {{#pathParams}}{{paramName}} {{{dataType}}}, {{/pathParams}}r {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request) ({{#returnType}}*{{{.}}}, {{/returnType}}error) { {{/vendorExtensions.x-group-parameters}}
 {{^vendorExtensions.x-group-parameters}}
 func (s *{{{classname}}}Service) {{nickname}}FileWithVideoId(videoId *string, {{#allParams}}{{paramName}} {{^required}}*{{/required}}{{{dataType}}}{{^-last}}, {{/-last}}{{/allParams}}) ({{#returnType}}*{{{.}}}, {{/returnType}}error) { {{/vendorExtensions.x-group-parameters}}
	 return s.{{nickname}}FileWithContextAndVideoId(context.Background(), videoId{{#allParams}}, {{paramName}}{{/allParams}})
 }

/*
 * {{operationId}}{{#summary}} {{{.}}}{{/summary}}{{^summary}} Method for {{operationId}}{{/summary}}
{{#notes}}
 * {{{unescapedNotes}}}
{{/notes}}
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().{{#pathParams}}
 * @param videoId *string the video id or nil
 * @param {{paramName}}{{#description}} {{{.}}}{{/description}}{{/pathParams}}
 * @return {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request
 */
{{#vendorExtensions.x-group-parameters}}func (s *{{{classname}}}Service) {{nickname}}FileWithContextAndVideoId(ctx context.Context, videoId *string{{#pathParams}}{{paramName}}, {{{dataType}}}{{/pathParams}}r {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request) ({{#returnType}}*{{{.}}}, {{/returnType}}error) { {{/vendorExtensions.x-group-parameters}}
{{^vendorExtensions.x-group-parameters}}
func (s *{{{classname}}}Service) {{nickname}}FileWithContextAndVideoId(ctx context.Context, videoId *string{{#allParams}}, {{paramName}} {{^required}}*{{/required}}{{{dataType}}}{{/allParams}}) ({{#returnType}}*{{{.}}}, {{/returnType}}error) { {{/vendorExtensions.x-group-parameters}}
    fileInfo, _  := file.Stat()
    fileSize := fileInfo.Size()

    return s.{{nickname}}WithContextAndVideoId(ctx, videoId, {{#allParams}}{{^isFile}}{{paramName}}, {{/isFile}}{{/allParams}}file.Name(), io.Reader(file), fileSize)
}
{{/vendorExtensions.x-client-copy-from-response}}
{{/vendorExtensions.x-upload}}

{{#vendorExtensions.x-client-chunk-upload}}
// VideosService communicating with the Videos
// endpoints of the api.video API
type {{nickname}}Stream struct {
	client *Client
    {{#allParams}}{{^isFile}}{{paramName}} {{^required}}*{{/required}}{{{dataType}}}
    {{/isFile}}{{/allParams}}	part int32{{#vendorExtensions.x-client-copy-from-response}}
    {{paramName}} *{{dataType}}{{/vendorExtensions.x-client-copy-from-response}}
}


func (s *{{{classname}}}Service) Create{{nickname}}Stream({{#allParams}}{{^isFile}}{{paramName}} {{^required}}*{{/required}}{{{dataType}}}{{^-last}}, {{/-last}}{{/isFile}}{{/allParams}}{{#vendorExtensions.x-client-copy-from-response}}{{paramName}} *{{dataType}}{{/vendorExtensions.x-client-copy-from-response}}) (IUploadStream, error) {
	return &{{nickname}}Stream{client: s.client, {{#allParams}}{{^isFile}}{{paramName}}: {{paramName}}{{/isFile}}{{/allParams}}{{#vendorExtensions.x-client-copy-from-response}}, {{paramName}} : {{paramName}}{{/vendorExtensions.x-client-copy-from-response}}, part: 1}, nil
}


func (s *{{nickname}}Stream) UploadAPart(ctx context.Context, fileName string, fileReader io.Reader, fileSize int64, isLast bool) (*Video, error) {
	localVarPath := "{{{path}}}"{{#pathParams}}
	localVarPath = strings.Replace(localVarPath, "{"+"{{baseName}}"+"}", url.PathEscape(parameterToString(s.{{paramName}}, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}")), -1){{/pathParams}}

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}{{#formParams}}{{#isFile}}{{#-first}}
	localVarFormParams := make(map[string]string){{/-first}}{{/isFile}}{{/formParams}}

{{#queryParams}}
    {{#required}}
        {{^isCollectionFormatMulti}}
            localVarQueryParams.Add("{{baseName}}", parameterToString(s.{{paramName}}, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}"))
        {{/isCollectionFormatMulti}}
    {{/required}}
{{/queryParams}}

{{#vendorExtensions.x-client-copy-from-response}}
    if s.{{paramName}} != nil {
        localVarFormParams["{{baseName}}"] = parameterToString(*s.{{paramName}}, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}")
    }
{{/vendorExtensions.x-client-copy-from-response}}

	request, err := s.client.prepareProgressiveUploadRequest(context.Background(), localVarPath, fileName, fileReader, fileSize, localVarHeaderParams, localVarQueryParams, localVarFormParams, s.part, isLast)

    if err != nil {
		return nil, err
	}

    s.part = s.part + 1

	res := new(Video)

	_, err = s.client.do(request, res)
{{#vendorExtensions.x-client-copy-from-response}}
    if s.{{paramName}} == nil {
        s.{{paramName}} = &res.{{vendorExtensions.getter}}
    }
{{/vendorExtensions.x-client-copy-from-response}}
if err != nil {
		return nil, err
	}

	return res, nil
}
func (s *{{nickname}}Stream) UploadPartWithContext(ctx context.Context, fileName string, fileReader io.Reader, fileSize int64) (*Video, error) {
    return s.UploadAPart(ctx, fileName, fileReader, fileSize, false)
}
func (s *{{nickname}}Stream) UploadLastPartWithContext(ctx context.Context, fileName string, fileReader io.Reader, fileSize int64) (*Video, error) {
    return s.UploadAPart(ctx, fileName, fileReader, fileSize, true)
}
func (s *{{nickname}}Stream) UploadPart(fileName string, fileReader io.Reader, fileSize int64) (*Video, error) {
	return s.UploadPartWithContext(context.Background(), fileName, fileReader, fileSize)
}
func (s *{{nickname}}Stream) UploadPartFile(file *os.File) (*Video, error) {
	return s.UploadPartWithContextFile(context.Background(), file)
}
func (s *{{nickname}}Stream) UploadPartWithContextFile(ctx context.Context, file *os.File) (*Video, error) {
	fileInfo, _  := file.Stat()
	fileSize := fileInfo.Size()

	return s.UploadPartWithContext(ctx, file.Name(), io.Reader(file), fileSize)
}
func (s *{{nickname}}Stream) UploadLastPart(fileName string, fileReader io.Reader, fileSize int64) (*Video, error) {
	return s.UploadLastPartWithContext(context.Background(), fileName, fileReader, fileSize)
}
func (s *{{nickname}}Stream) UploadLastPartFile(file *os.File) (*Video, error) {
	return s.UploadLastPartWithContextFile(context.Background(), file)
}
func (s *{{nickname}}Stream) UploadLastPartWithContextFile(ctx context.Context, file *os.File) (*Video, error) {
	fileInfo, _  := file.Stat()
	fileSize := fileInfo.Size()

	return s.UploadLastPartWithContext(ctx, file.Name(), io.Reader(file), fileSize)
}


{{/vendorExtensions.x-client-chunk-upload}}

/*
 * {{operationId}}{{#summary}} {{{.}}}{{/summary}}{{^summary}} Method for {{operationId}}{{/summary}}
{{#notes}}
 * {{{unescapedNotes}}}
{{/notes}}{{#pathParams}}
 * @param {{paramName}}{{#description}} {{{.}}}{{/description}}{{/pathParams}}
 * @return {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request
 */
{{#vendorExtensions.x-upload}}func (s *{{{classname}}}Service) {{nickname}}({{#allParams}}{{^isFile}}{{paramName}} {{^required}}*{{/required}}{{{dataType}}}, {{/isFile}}{{/allParams}}fileName string, fileReader io.Reader{{#vendorExtensions.x-client-chunk-upload}}, fileSize int64{{/vendorExtensions.x-client-chunk-upload}}) ({{#returnType}}*{{{.}}}, {{/returnType}}error) { {{/vendorExtensions.x-upload}}{{^vendorExtensions.x-upload}}
{{#vendorExtensions.x-group-parameters}}func (s *{{{classname}}}Service) {{nickname}}({{#pathParams}}{{paramName}} {{{dataType}}}, {{/pathParams}}r {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request) ({{#returnType}}*{{{.}}}, {{/returnType}}error) { {{/vendorExtensions.x-group-parameters}}
{{^vendorExtensions.x-group-parameters}}
func (s *{{{classname}}}Service) {{nickname}}({{#requiredParams}}{{paramName}} {{{dataType}}}{{^-last}}, {{/-last}}{{/requiredParams}}) ({{#returnType}}*{{{.}}}, {{/returnType}}error) {
{{/vendorExtensions.x-group-parameters}}
{{/vendorExtensions.x-upload}}
	{{#vendorExtensions.x-upload}}return s.{{nickname}}WithContext(context.Background(){{#allParams}}{{^isFile}}, {{paramName}}{{/isFile}}{{/allParams}}, fileName, fileReader{{#vendorExtensions.x-client-chunk-upload}}, fileSize{{/vendorExtensions.x-client-chunk-upload}}){{/vendorExtensions.x-upload}}{{^vendorExtensions.x-upload}}
	{{#vendorExtensions.x-group-parameters}}return s.{{nickname}}WithContext{{#vendorExtensions.x-client-copy-from-response}}AndVideoId{{/vendorExtensions.x-client-copy-from-response}}(context.Background(){{#pathParams}}, {{paramName}}{{/pathParams}}, r){{/vendorExtensions.x-group-parameters}}
	{{^vendorExtensions.x-group-parameters}}
	return s.{{nickname}}WithContext{{#vendorExtensions.x-client-copy-from-response}}AndVideoId{{/vendorExtensions.x-client-copy-from-response}}(context.Background(){{#requiredParams}}, {{paramName}}{{/requiredParams}})
	{{/vendorExtensions.x-group-parameters}}
	{{/vendorExtensions.x-upload}}

}

{{#vendorExtensions.x-upload}}{{#vendorExtensions.x-client-copy-from-response}}
/*
 * {{operationId}}{{#summary}} {{{.}}}{{/summary}}{{^summary}} Method for {{operationId}}{{/summary}}
{{#notes}}
 * {{{unescapedNotes}}}
{{/notes}}
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().{{#pathParams}}
 * @param {{paramName}}{{#description}} {{{.}}}{{/description}}{{/pathParams}}
 * @return {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request
 */
func (s *{{{classname}}}Service) {{nickname}}WithContext(ctx context.Context{{#allParams}}{{^isFile}}, {{paramName}} {{^required}}*{{/required}}{{{dataType}}}{{/isFile}}{{/allParams}}, fileName string, fileReader io.Reader, fileSize int64) ({{#returnType}}*{{{.}}}, {{/returnType}}error) {
	return s.{{nickname}}WithContextAndVideoId(ctx, nil{{#allParams}}{{^isFile}}, {{paramName}}{{/isFile}}{{/allParams}}, fileName, fileReader, fileSize)
}

/*
 * {{operationId}}{{#summary}} {{{.}}}{{/summary}}{{^summary}} Method for {{operationId}}{{/summary}}
{{#notes}}
 * {{{unescapedNotes}}}
{{/notes}}
 * @param videoId *string the video id or nil{{#pathParams}}
 * @param {{paramName}}{{#description}} {{{.}}}{{/description}}{{/pathParams}}
 * @return {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request
 */
func (s *{{{classname}}}Service) {{nickname}}WithVideoId(videoId *string{{#allParams}}{{^isFile}}, {{paramName}} {{^required}}*{{/required}}{{{dataType}}}{{/isFile}}{{/allParams}}, fileName string, fileReader io.Reader, fileSize int64) ({{#returnType}}*{{{.}}}, {{/returnType}}error) {
	return s.{{nickname}}WithContextAndVideoId(context.Background(), videoId{{#allParams}}{{^isFile}}, {{paramName}}{{/isFile}}{{/allParams}}, fileName, fileReader, fileSize)
}

{{/vendorExtensions.x-client-copy-from-response}}{{/vendorExtensions.x-upload}}
/*
 * {{operationId}}{{#summary}} {{{.}}}{{/summary}}{{^summary}} Method for {{operationId}}{{/summary}}
{{#notes}}
 * {{{unescapedNotes}}}
{{/notes}}
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().{{#vendorExtensions.x-client-copy-from-response}}
 * @param videoId *string the video id or nil{{/vendorExtensions.x-client-copy-from-response}}{{#pathParams}}
 * @param {{paramName}}{{#description}} {{{.}}}{{/description}}{{/pathParams}}
 * @return {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request
 */
{{#vendorExtensions.x-upload}}func (s *{{{classname}}}Service) {{nickname}}WithContext{{#vendorExtensions.x-client-copy-from-response}}AndVideoId{{/vendorExtensions.x-client-copy-from-response}}(ctx context.Context{{#vendorExtensions.x-client-copy-from-response}}, videoId *string{{/vendorExtensions.x-client-copy-from-response}}{{#allParams}}{{^isFile}}, {{paramName}} {{^required}}*{{/required}}{{{dataType}}}{{/isFile}}{{/allParams}}, fileName string, fileReader io.Reader{{#vendorExtensions.x-client-chunk-upload}}, fileSize int64{{/vendorExtensions.x-client-chunk-upload}}) ({{#returnType}}*{{{.}}}, {{/returnType}}error) { {{/vendorExtensions.x-upload}}{{^vendorExtensions.x-upload}}
{{#vendorExtensions.x-group-parameters}}func (s *{{{classname}}}Service) {{nickname}}WithContext(ctx context.Context{{#pathParams}}, {{paramName}} {{{dataType}}}{{/pathParams}}, r {{#structPrefix}}{{&classname}}{{/structPrefix}}Api{{operationId}}Request) ({{#returnType}}*{{{.}}}, {{/returnType}}error) { {{/vendorExtensions.x-group-parameters}}
{{^vendorExtensions.x-group-parameters}}
func (s *{{{classname}}}Service) {{nickname}}WithContext(ctx context.Context{{#requiredParams}}, {{paramName}} {{{dataType}}}{{/requiredParams}}) ({{#returnType}}*{{{.}}}, {{/returnType}}error) {
{{/vendorExtensions.x-group-parameters}}
{{/vendorExtensions.x-upload}}
{{^vendorExtensions.x-upload}}
	var localVarPostBody interface{}
{{/vendorExtensions.x-upload}}

	localVarPath := "{{{path}}}"{{#pathParams}}
	localVarPath = strings.Replace(localVarPath, "{"+"{{baseName}}"+"}", url.PathEscape(parameterToString({{paramName}}, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}")), -1){{/pathParams}}

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}{{#formParams}}{{#isFile}}{{#-first}}
	localVarFormParams := make(map[string]string){{/-first}}{{/isFile}}{{/formParams}}{{#vendorExtensions.x-client-copy-from-response}}
	
	if videoId != nil {
		localVarFormParams["videoId"] = parameterToString(*videoId, "")
	}{{/vendorExtensions.x-client-copy-from-response}}

{{#allParams}}
	{{#required}}
	{{#minItems}}
	if len({{^isPathParam}}*{{/isPathParam}}r.{{paramName}}) < {{minItems}} {
		return {{#returnType}}nil, {{/returnType}}reportError("{{paramName}} must have at least {{minItems}} elements")
	}
	{{/minItems}}
	{{#maxItems}}
	if len({{^isPathParam}}*{{/isPathParam}}r.{{paramName}}) > {{maxItems}} {
		return {{#returnType}}nil, {{/returnType}}reportError("{{paramName}} must have less than {{maxItems}} elements")
	}
	{{/maxItems}}
	{{#minLength}}
	if strlen({{^isPathParam}}*{{/isPathParam}}r.{{paramName}}) < {{minLength}} {
		return {{#returnType}}nil, {{/returnType}}reportError("{{paramName}} must have at least {{minLength}} elements")
	}
	{{/minLength}}
	{{#maxLength}}
	if strlen({{^isPathParam}}*{{/isPathParam}}r.{{paramName}}) > {{maxLength}} {
		return {{#returnType}}nil, {{/returnType}}reportError("{{paramName}} must have less than {{maxLength}} elements")
	}
	{{/maxLength}}
	{{#minimum}}
	{{#isString}}
	{{paramName}}Txt, err := atoi({{^isPathParam}}*{{/isPathParam}}r.{{paramName}})
	if {{paramName}}Txt < {{minimum}} {
	{{/isString}}
	{{^isString}}
	if {{^isPathParam}}*{{/isPathParam}}r.{{paramName}} < {{minimum}} {
	{{/isString}}
		return {{#returnType}}nil, {{/returnType}}reportError("{{paramName}} must be greater than {{minimum}}")
	}
	{{/minimum}}
	{{#maximum}}
	{{#isString}}
	{{paramName}}Txt, err := atoi({{^isPathParam}}*{{/isPathParam}}r.{{paramName}})
	if {{paramName}}Txt > {{maximum}} {
	{{/isString}}
	{{^isString}}
	if {{^isPathParam}}*{{/isPathParam}}r.{{paramName}} > {{maximum}} {
	{{/isString}}
		return {{#returnType}}nil, {{/returnType}}reportError("{{paramName}} must be less than {{maximum}}")
	}
	{{/maximum}}
	{{/required}}
{{/allParams}}
{{#queryParams}}
	{{#required}}
	{{#isCollectionFormatMulti}}
	{
		t := *r.{{paramName}}
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("{{baseName}}", parameterToString(s.Index(i), "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}"))
			}
		} else {
			localVarQueryParams.Add("{{baseName}}", parameterToString(t, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}"))
		}
	}
	{{/isCollectionFormatMulti}}
	{{^isCollectionFormatMulti}}
    {{#vendorExtensions.x-group-parameters}}
    localVarQueryParams.Add("{{baseName}}", parameterToString(*r.{{paramName}}, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}"))
    {{/vendorExtensions.x-group-parameters}}
    {{^vendorExtensions.x-group-parameters}}
    localVarQueryParams.Add("{{baseName}}", parameterToString({{paramName}}, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}"))
    {{/vendorExtensions.x-group-parameters}}
	{{/isCollectionFormatMulti}}
	{{/required}}
	{{^required}}
	if r.{{paramName}} != nil {
	{{#isCollectionFormatMulti}}
		t := *r.{{paramName}}
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("{{baseName}}", parameterToString(s.Index(i), "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}"))
			}
		} else {
			localVarQueryParams.Add("{{baseName}}", parameterToString(t, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}"))
		}
	{{/isCollectionFormatMulti}}
	{{^isCollectionFormatMulti}}
    {{#vendorExtensions.x-is-deep-object}}
    addDeepQueryParams(r.{{paramName}}, "{{paramName}}", localVarQueryParams)
    {{/vendorExtensions.x-is-deep-object}}
    {{^vendorExtensions.x-is-deep-object}}
		localVarQueryParams.Add("{{baseName}}", parameterToString(*r.{{paramName}}, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}"))
    {{/vendorExtensions.x-is-deep-object}}
	{{/isCollectionFormatMulti}}
	}
	{{/required}}
{{/queryParams}}
{{#headerParams}}
	{{#required}}
	localVarHeaderParams["{{baseName}}"] = parameterToString(*r.{{paramName}}, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}")
	{{/required}}
	{{^required}}
	if r.{{paramName}} != nil {
		localVarHeaderParams["{{baseName}}"] = parameterToString(*r.{{paramName}}, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}")
	}
	{{/required}}
{{/headerParams}}
{{#formParams}}
{{^isFile}}{{#required}}
	localVarFormParams["{{baseName}}"] = parameterToString({{paramName}}, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}")
{{/required}}{{^required}}{{#isModel}}
	if r.{{paramName}} != nil {
		paramJson, err := parameterToJson(*r.{{paramName}})
		if err != nil {
			return {{#returnType}}nil, {{/returnType}}err
		}
		localVarFormParams.Add("{{baseName}}", paramJson)
	}
{{/isModel}}
{{^isModel}}
	if {{paramName}} != nil {
        localVarFormParams["{{baseName}}"] = parameterToString(*{{paramName}}, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}")
	}
{{/isModel}}
{{/required}}
{{/isFile}}
{{/formParams}}
{{#bodyParams}}
	// body params
	localVarPostBody = {{paramName}}
{{/bodyParams}}

{{#vendorExtensions.x-upload}}
{{#formParams}}{{#isFile}}{{#-first}}{{^vendorExtensions.x-client-chunk-upload}}
    req, err := s.client.prepareUploadRequest(ctx, localVarPath, fileName, fileReader, localVarHeaderParams, localVarQueryParams, localVarFormParams){{/vendorExtensions.x-client-chunk-upload}}
{{#vendorExtensions.x-client-chunk-upload}}
    requests, err := s.client.prepareRangeRequests(ctx, localVarPath, fileName, fileReader, fileSize, localVarHeaderParams, localVarQueryParams, localVarFormParams)
{{/vendorExtensions.x-client-chunk-upload}}
{{/-first}}{{/isFile}}{{/formParams}}
{{/vendorExtensions.x-upload}}
{{^vendorExtensions.x-upload}}
	req, err := s.client.prepareRequest(ctx, http.Method{{httpMethod}}, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
{{/vendorExtensions.x-upload}}
	if err != nil {
		return {{#returnType}}nil, {{/returnType}}err
	}

    {{#returnType}}res := new({{{.}}}){{/returnType}}
{{#vendorExtensions.x-client-chunk-upload}}
	for _, req := range requests {
		_, err = s.client.do(req, {{#returnType}}res{{/returnType}}{{^returnType}}nil{{/returnType}})

		if err != nil {
            return {{#returnType}}nil, {{/returnType}}err
		}
	}
{{/vendorExtensions.x-client-chunk-upload}}
{{^vendorExtensions.x-client-chunk-upload}}
    _, err = s.client.do(req, {{#returnType}}res{{/returnType}}{{^returnType}}nil{{/returnType}})

	if err != nil {
		return {{#returnType}}nil, {{/returnType}}err
	}
{{/vendorExtensions.x-client-chunk-upload}}

    return {{#returnType}}res, {{/returnType}}nil

}
{{/operation}}
{{/operations}}
